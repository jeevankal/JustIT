{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1EP3Wb0wj7kYxF4lrLKcneXVN-kLG84x4",
      "authorship_tag": "ABX9TyOYUnJb/IsAFtapp5J6zYj6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jeevankal/JustIT/blob/main/Just%20IT%20Python%20Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dh60EsYJKeHP",
        "outputId": "fb952014-4748-41f0-b466-c9153eea237a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "#mounting drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "import pandas as pd\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1=pd.read_csv(\"/content/drive/MyDrive/wk10_pandas_learner/Resources/Flight Delays/Flights_Delay_Cause_2019-2020.csv\")\n",
        "df2=pd.read_csv(\"/content/drive/MyDrive/wk10_pandas_learner/Resources/Flight Delays/Flights_Delay_Cause_2020-2021.csv\")\n",
        "df3=pd.read_csv(\"/content/drive/MyDrive/wk10_pandas_learner/Resources/Flight Delays/Flights_Delay_Cause_2021-2022.csv\")"
      ],
      "metadata": {
        "id": "ukRK8rApKoFZ"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df= pd.concat([df1, df2, df3], ignore_index=True)"
      ],
      "metadata": {
        "id": "EEhfIDbyKyvn"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy= df.copy(deep=True)"
      ],
      "metadata": {
        "id": "hTq29Y5tK2NS"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy['date']= df_copy['month']+df_copy['year']\n",
        "df_copy.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "NKGXwzS0MreT",
        "outputId": "a5468082-5c17-4d1c-f345-779c1cc84df7"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   year  month carrier       carrier_name airport  \\\n",
              "0  2022      7      9E  Endeavor Air Inc.     ABE   \n",
              "1  2022      7      9E  Endeavor Air Inc.     ABY   \n",
              "2  2022      7      9E  Endeavor Air Inc.     ACK   \n",
              "3  2022      7      9E  Endeavor Air Inc.     AEX   \n",
              "4  2022      7      9E  Endeavor Air Inc.     AGS   \n",
              "\n",
              "                                        airport_name  arr_flights  arr_del15  \\\n",
              "0  Allentown/Bethlehem/Easton, PA: Lehigh Valley ...         33.0        2.0   \n",
              "1             Albany, GA: Southwest Georgia Regional         78.0       25.0   \n",
              "2                  Nantucket, MA: Nantucket Memorial        124.0       19.0   \n",
              "3           Alexandria, LA: Alexandria International         67.0       10.0   \n",
              "4        Augusta, GA: Augusta Regional at Bush Field        174.0       30.0   \n",
              "\n",
              "   arr_cancelled  arr_diverted  arr_delay  carrier_delay  weather_delay  \\\n",
              "0            0.0           0.0      129.0           98.0           23.0   \n",
              "1            0.0           0.0     1664.0          887.0           52.0   \n",
              "2            5.0           4.0     1523.0          388.0           35.0   \n",
              "3            0.0           1.0      657.0          103.0           82.0   \n",
              "4            1.0           0.0     2462.0         1686.0          310.0   \n",
              "\n",
              "   nas_delay  security_delay  delays  date  \n",
              "0        8.0             0.0     NaN  2029  \n",
              "1      224.0             0.0     NaN  2029  \n",
              "2      511.0             0.0     NaN  2029  \n",
              "3       93.0            25.0     NaN  2029  \n",
              "4      139.0             0.0     NaN  2029  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1a6b415c-754b-4d0a-9360-a967c24c05de\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>carrier</th>\n",
              "      <th>carrier_name</th>\n",
              "      <th>airport</th>\n",
              "      <th>airport_name</th>\n",
              "      <th>arr_flights</th>\n",
              "      <th>arr_del15</th>\n",
              "      <th>arr_cancelled</th>\n",
              "      <th>arr_diverted</th>\n",
              "      <th>arr_delay</th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "      <th>delays</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022</td>\n",
              "      <td>7</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ABE</td>\n",
              "      <td>Allentown/Bethlehem/Easton, PA: Lehigh Valley ...</td>\n",
              "      <td>33.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>129.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022</td>\n",
              "      <td>7</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ABY</td>\n",
              "      <td>Albany, GA: Southwest Georgia Regional</td>\n",
              "      <td>78.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1664.0</td>\n",
              "      <td>887.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>224.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022</td>\n",
              "      <td>7</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ACK</td>\n",
              "      <td>Nantucket, MA: Nantucket Memorial</td>\n",
              "      <td>124.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1523.0</td>\n",
              "      <td>388.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>511.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022</td>\n",
              "      <td>7</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>AEX</td>\n",
              "      <td>Alexandria, LA: Alexandria International</td>\n",
              "      <td>67.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>657.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>93.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022</td>\n",
              "      <td>7</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>AGS</td>\n",
              "      <td>Augusta, GA: Augusta Regional at Bush Field</td>\n",
              "      <td>174.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2462.0</td>\n",
              "      <td>1686.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>139.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a6b415c-754b-4d0a-9360-a967c24c05de')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1a6b415c-754b-4d0a-9360-a967c24c05de button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1a6b415c-754b-4d0a-9360-a967c24c05de');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-79308656-5115-4015-8aaf-b66cefd15c24\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79308656-5115-4015-8aaf-b66cefd15c24')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-79308656-5115-4015-8aaf-b66cefd15c24 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_copy",
              "summary": "{\n  \"name\": \"df_copy\",\n  \"rows\": 42461,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2019,\n        \"max\": 2022,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2020,\n          2021,\n          2022\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          9,\n          10,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carrier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"9E\",\n          \"AA\",\n          \"MQ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carrier_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Endeavor Air Inc.\",\n          \"American Airlines Inc.\",\n          \"Envoy Air\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 378,\n        \"samples\": [\n          \"BTM\",\n          \"PRC\",\n          \"MKG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airport_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 378,\n        \"samples\": [\n          \"Butte, MT: Bert Mooney\",\n          \"Prescott, AZ: Prescott Regional Ernest A Love Field\",\n          \"Muskegon, MI: Muskegon County\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_flights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 836.4857706474547,\n        \"min\": 1.0,\n        \"max\": 21873.0,\n        \"num_unique_values\": 2720,\n        \"samples\": [\n          1171.0,\n          320.0,\n          6516.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_del15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 130.7370623083291,\n        \"min\": 0.0,\n        \"max\": 3506.0,\n        \"num_unique_values\": 910,\n        \"samples\": [\n          354.0,\n          1325.0,\n          634.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_cancelled\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.613366238873,\n        \"min\": 0.0,\n        \"max\": 4951.0,\n        \"num_unique_values\": 427,\n        \"samples\": [\n          281.0,\n          56.0,\n          402.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_diverted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0697797400310836,\n        \"min\": 0.0,\n        \"max\": 154.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          3.0,\n          14.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9664.845862222446,\n        \"min\": 0.0,\n        \"max\": 305694.0,\n        \"num_unique_values\": 8084,\n        \"samples\": [\n          2666.0,\n          1224.0,\n          12644.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carrier_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3405.1014432729276,\n        \"min\": 0.0,\n        \"max\": 119425.0,\n        \"num_unique_values\": 5110,\n        \"samples\": [\n          1610.0,\n          3464.0,\n          3312.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 742.1318830209949,\n        \"min\": 0.0,\n        \"max\": 26428.0,\n        \"num_unique_values\": 2108,\n        \"samples\": [\n          822.0,\n          1526.0,\n          553.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nas_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2784.6053832723146,\n        \"min\": 0.0,\n        \"max\": 200000.0,\n        \"num_unique_values\": 3690,\n        \"samples\": [\n          4672.0,\n          3956.0,\n          331.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"security_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.371314020012576,\n        \"min\": 0.0,\n        \"max\": 3760.0,\n        \"num_unique_values\": 381,\n        \"samples\": [\n          482.0,\n          164.0,\n          33.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2021,\n        \"max\": 2032,\n        \"num_unique_values\": 12,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy=df_copy.astype({\"month\": str, \"year\":str, \"date\":str})\n",
        "df_copy.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JYGpeC3eMuw5",
        "outputId": "dd482c7b-c694-4ccf-b6e6-22e4eabd9352"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 42461 entries, 0 to 42460\n",
            "Data columns (total 17 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   year            42461 non-null  object \n",
            " 1   month           42461 non-null  object \n",
            " 2   carrier         42461 non-null  object \n",
            " 3   carrier_name    42445 non-null  object \n",
            " 4   airport         42461 non-null  object \n",
            " 5   airport_name    42461 non-null  object \n",
            " 6   arr_flights     42354 non-null  float64\n",
            " 7   arr_del15       42183 non-null  float64\n",
            " 8   arr_cancelled   42354 non-null  float64\n",
            " 9   arr_diverted    42354 non-null  float64\n",
            " 10  arr_delay       42354 non-null  float64\n",
            " 11  carrier_delay   42354 non-null  float64\n",
            " 12  weather_delay   42354 non-null  float64\n",
            " 13  nas_delay       42354 non-null  float64\n",
            " 14  security_delay  42354 non-null  float64\n",
            " 15  delays          0 non-null      float64\n",
            " 16  date            42461 non-null  object \n",
            "dtypes: float64(10), object(7)\n",
            "memory usage: 5.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy.to_csv('flights_dataset.csv')"
      ],
      "metadata": {
        "id": "1wuwnOA0Mx7g"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MrFZ__ykM2Ff",
        "outputId": "2830fbdb-5ad4-45ad-b048-70c72404f8a3"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy=df_copy.drop(['month', 'year'], axis=1)\n",
        "df_copy.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "5bJakOfsM39X",
        "outputId": "f1f93710-bf13-4fa3-9ca3-72aaf313fc5c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  carrier       carrier_name airport  \\\n",
              "0      9E  Endeavor Air Inc.     ABE   \n",
              "1      9E  Endeavor Air Inc.     ABY   \n",
              "2      9E  Endeavor Air Inc.     ACK   \n",
              "3      9E  Endeavor Air Inc.     AEX   \n",
              "4      9E  Endeavor Air Inc.     AGS   \n",
              "\n",
              "                                        airport_name  arr_flights  arr_del15  \\\n",
              "0  Allentown/Bethlehem/Easton, PA: Lehigh Valley ...         33.0        2.0   \n",
              "1             Albany, GA: Southwest Georgia Regional         78.0       25.0   \n",
              "2                  Nantucket, MA: Nantucket Memorial        124.0       19.0   \n",
              "3           Alexandria, LA: Alexandria International         67.0       10.0   \n",
              "4        Augusta, GA: Augusta Regional at Bush Field        174.0       30.0   \n",
              "\n",
              "   arr_cancelled  arr_diverted  arr_delay  carrier_delay  weather_delay  \\\n",
              "0            0.0           0.0      129.0           98.0           23.0   \n",
              "1            0.0           0.0     1664.0          887.0           52.0   \n",
              "2            5.0           4.0     1523.0          388.0           35.0   \n",
              "3            0.0           1.0      657.0          103.0           82.0   \n",
              "4            1.0           0.0     2462.0         1686.0          310.0   \n",
              "\n",
              "   nas_delay  security_delay  delays  date  \n",
              "0        8.0             0.0     NaN  2029  \n",
              "1      224.0             0.0     NaN  2029  \n",
              "2      511.0             0.0     NaN  2029  \n",
              "3       93.0            25.0     NaN  2029  \n",
              "4      139.0             0.0     NaN  2029  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-71921559-46fe-4220-b731-866c3d946fd1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carrier</th>\n",
              "      <th>carrier_name</th>\n",
              "      <th>airport</th>\n",
              "      <th>airport_name</th>\n",
              "      <th>arr_flights</th>\n",
              "      <th>arr_del15</th>\n",
              "      <th>arr_cancelled</th>\n",
              "      <th>arr_diverted</th>\n",
              "      <th>arr_delay</th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "      <th>delays</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ABE</td>\n",
              "      <td>Allentown/Bethlehem/Easton, PA: Lehigh Valley ...</td>\n",
              "      <td>33.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>129.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ABY</td>\n",
              "      <td>Albany, GA: Southwest Georgia Regional</td>\n",
              "      <td>78.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1664.0</td>\n",
              "      <td>887.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>224.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ACK</td>\n",
              "      <td>Nantucket, MA: Nantucket Memorial</td>\n",
              "      <td>124.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1523.0</td>\n",
              "      <td>388.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>511.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>AEX</td>\n",
              "      <td>Alexandria, LA: Alexandria International</td>\n",
              "      <td>67.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>657.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>93.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>AGS</td>\n",
              "      <td>Augusta, GA: Augusta Regional at Bush Field</td>\n",
              "      <td>174.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2462.0</td>\n",
              "      <td>1686.0</td>\n",
              "      <td>310.0</td>\n",
              "      <td>139.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71921559-46fe-4220-b731-866c3d946fd1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-71921559-46fe-4220-b731-866c3d946fd1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-71921559-46fe-4220-b731-866c3d946fd1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b4109839-7e16-4c61-9900-22ceee969bb0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b4109839-7e16-4c61-9900-22ceee969bb0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b4109839-7e16-4c61-9900-22ceee969bb0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_copy",
              "summary": "{\n  \"name\": \"df_copy\",\n  \"rows\": 42461,\n  \"fields\": [\n    {\n      \"column\": \"carrier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"9E\",\n          \"AA\",\n          \"MQ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carrier_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Endeavor Air Inc.\",\n          \"American Airlines Inc.\",\n          \"Envoy Air\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 378,\n        \"samples\": [\n          \"BTM\",\n          \"PRC\",\n          \"MKG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airport_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 378,\n        \"samples\": [\n          \"Butte, MT: Bert Mooney\",\n          \"Prescott, AZ: Prescott Regional Ernest A Love Field\",\n          \"Muskegon, MI: Muskegon County\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_flights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 836.4857706474547,\n        \"min\": 1.0,\n        \"max\": 21873.0,\n        \"num_unique_values\": 2720,\n        \"samples\": [\n          1171.0,\n          320.0,\n          6516.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_del15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 130.7370623083291,\n        \"min\": 0.0,\n        \"max\": 3506.0,\n        \"num_unique_values\": 910,\n        \"samples\": [\n          354.0,\n          1325.0,\n          634.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_cancelled\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.613366238873,\n        \"min\": 0.0,\n        \"max\": 4951.0,\n        \"num_unique_values\": 427,\n        \"samples\": [\n          281.0,\n          56.0,\n          402.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_diverted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0697797400310836,\n        \"min\": 0.0,\n        \"max\": 154.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          3.0,\n          14.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9664.845862222446,\n        \"min\": 0.0,\n        \"max\": 305694.0,\n        \"num_unique_values\": 8084,\n        \"samples\": [\n          2666.0,\n          1224.0,\n          12644.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carrier_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3405.1014432729276,\n        \"min\": 0.0,\n        \"max\": 119425.0,\n        \"num_unique_values\": 5110,\n        \"samples\": [\n          1610.0,\n          3464.0,\n          3312.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 742.1318830209949,\n        \"min\": 0.0,\n        \"max\": 26428.0,\n        \"num_unique_values\": 2108,\n        \"samples\": [\n          822.0,\n          1526.0,\n          553.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nas_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2784.6053832723146,\n        \"min\": 0.0,\n        \"max\": 200000.0,\n        \"num_unique_values\": 3690,\n        \"samples\": [\n          4672.0,\n          3956.0,\n          331.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"security_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.371314020012576,\n        \"min\": 0.0,\n        \"max\": 3760.0,\n        \"num_unique_values\": 381,\n        \"samples\": [\n          482.0,\n          164.0,\n          33.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 12,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "xylQ688YM6Qv",
        "outputId": "5dee8910-bc1d-41f4-de19-a23db364a0d8"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "carrier               0\n",
              "carrier_name         16\n",
              "airport               0\n",
              "airport_name          0\n",
              "arr_flights         107\n",
              "arr_del15           278\n",
              "arr_cancelled       107\n",
              "arr_diverted        107\n",
              "arr_delay           107\n",
              "carrier_delay       107\n",
              "weather_delay       107\n",
              "nas_delay           107\n",
              "security_delay      107\n",
              "delays            42461\n",
              "date                  0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>carrier</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carrier_name</th>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airport</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airport_name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_flights</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_del15</th>\n",
              "      <td>278</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_cancelled</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_diverted</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_delay</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carrier_delay</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weather_delay</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nas_delay</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>security_delay</th>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delays</th>\n",
              "      <td>42461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eu-aetZ5M_u2",
        "outputId": "120d549a-306a-4927-efeb-d15b2294f8c4"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['carrier', 'carrier_name', 'airport', 'airport_name', 'arr_flights',\n",
              "       'arr_del15', 'arr_cancelled', 'arr_diverted', 'arr_delay',\n",
              "       'carrier_delay', 'weather_delay', 'nas_delay', 'security_delay',\n",
              "       'delays', 'date'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy.boxplot('weather_delay')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "UFOHU2YLNBTy",
        "outputId": "ea97cff4-9b32-4385-ede2-e9777fd38803"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def box_plot(flights):\n",
        "    return df_copy.boxplot(flights)"
      ],
      "metadata": {
        "id": "11xrKh7iND6W"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "box_plot('nas_delay')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "EMRVgmPQNE0u",
        "outputId": "079c7910-99ad-4fcd-bda4-150865ecc71b"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "outlier_index= df_copy[df_copy['nas_delay']>175000].index\n",
        "df_cleaned= df_copy.drop(outlier_index)"
      ],
      "metadata": {
        "id": "SRgyS_lRNIAL"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "outlier_index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7D2IvqMONJwq",
        "outputId": "14ea940e-c29b-4f62-e3d7-cac9565d4af5"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index([363], dtype='int64')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.boxplot('nas_delay')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "aPSbdClqNLaQ",
        "outputId": "46f27cb5-781f-48c8-a821-bf495b1fa256"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "XxW-8sHGNRgz"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "figure, ax = plt.subplots(nrows=2, ncols=1) # subplot layer has 2 rows an 1 column which means 2 figures\n",
        "df_cleaned.hist('weather_delay',ax=ax[0], bins=25, color=\"purple\")\n",
        "df_cleaned.boxplot(\"weather_delay\",ax=ax[1], color=\"blue\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "oLsXSC2DNTZZ",
        "outputId": "649b2b5f-677f-4e65-fb57-70ca55f572b9"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def subplot_function(data1, data2):  # I added one parameter per plot\n",
        "    figure, ax = plt.subplots(nrows=2, ncols=1)\n",
        "\n",
        "    # Get statistics\n",
        "    min_val= df_cleaned[data1].min()\n",
        "    max_val= df_cleaned[data1].max()\n",
        "    mean_val= df_cleaned[data1].mean()\n",
        "    med_val= df_cleaned[data1].median()\n",
        "\n",
        "    # Add lines for the min, mean and median, and max\n",
        "    ax[0].axvline(x=min_val, color = 'gray', linestyle='dashed', linewidth = 2)\n",
        "    ax[0].axvline(x=mean_val, color = 'cyan', linestyle='dashed', linewidth = 2)\n",
        "    ax[0].axvline(x=med_val, color = 'red', linestyle='dashed', linewidth = 2)\n",
        "    ax[0].axvline(x=max_val, color = 'blue', linestyle='dashed', linewidth = 2)\n",
        "\n",
        "    #Change labels- 1st plot\n",
        "    ax[0].set_ylabel('Frequency')\n",
        "\n",
        "    df_cleaned.hist(data1,ax=ax[0], bins=10, color=\"purple\")\n",
        "\n",
        "\n",
        "    #Change labels- 2nd plot\n",
        "    ax[1].set_xlabel('')\n",
        "    ax[1].set_ylabel('Frequency')\n",
        "\n",
        "\n",
        "    df_cleaned.boxplot(data2,ax=ax[1], color=\"blue\")"
      ],
      "metadata": {
        "id": "ZUO-O3kzNWcY"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "subplot_function('nas_delay',\"nas_delay\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "eVbg-dxzNZdA",
        "outputId": "194b3cfe-3897-4e32-e759-8a6e752036a8"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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ALVajdatW0sxt2+jPKZ8G0qlEp07dzaI0ev1SExMlGKIiIiolnv449LvbsKECcLFxUXs2LFDpKenSz+FhYVSTGhoqGjUqJHYtm2bOHjwoPD39xf+/v7S+vIpBwIDA8WRI0fE5s2bRb169SqdcmDKlCni1KlTYvHixZVOOaBSqURcXJw4efKkGD9+vHB1dTV4Ku9e+PQcUc0BPj1HVGtUmykH7vaPUGxsrBRTVFQk3nzzTeHm5iYcHBzEkCFDRHp6usF2Ll68KAYMGCDs7e2Fu7u7eOedd4RWqzWI2b59u+jQoYNQKpXiscceM9hHuYULF4pGjRoJpVIpunbtKvbu3Wv0sbBoIqo5WDQR1R5V+f6WCcG37pqDRqOBi4sLcnNzORCcqJqryjs1+U8oUfVWle9vi45pIiIiIqouWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFF0x0WL16MJk2awM7ODt26dcP+/fstnRIRERFZARZNt1m1ahUiIiIwY8YMHDp0CO3bt0dQUBCysrIsnRoRERFZmEwIISydhLXo1q0bnnjiCSxatAgAoNfr4ePjg7feegvTpk2752c1Gg1cXFyQm5sLtVr9KNIlqrHOnQPy8h58O0VFwMWLVf/cqFEyo2N/+cW0f0KbNAHs7U36qMTZGWjW7MG2QVTbVeX72/YR5WT1SktLkZKSgsjISKnNxsYGAQEBSE5OrhBfUlKCkpISaVmj0QAAtFottFrtw0+YqIY6ehR44gmFhbPoaHTkqFEPMQ0jnDihZeFE9ACq8p3Noum/rl+/Dp1OB09PT4N2T09PnD59ukJ8VFQUZs6cWaF969atcHBweGh5EtV0CQmNUJWi5eE4ZOH9Gy8pKQnnzhVYOg2iaquwsNDoWBZNJoqMjERERIS0rNFo4OPjg8DAQN6eI3oAXbsCjRqVwdUVsLN7sNEDpaXA1atV/9yMGd2Mjp05c1/VdwCgQQNAqTTpo5LGjYEnn+z9YBshquXK7xQZg0XTf7m7u0MulyMzM9OgPTMzE15eXhXiVSoVVCpVhXaFQgGFwtK3Foiqr/r1galTLZvD9OmHIJPdf1wTh4QSVX9V+c7m03P/pVQq0blzZyQmJkpter0eiYmJ8Pf3t2BmRGQJ9yuIWDAR1T680nSbiIgIBAcHo0uXLujatSu+/vprFBQUYOzYsZZOjYgsQAhR6RUnFkxEtROLptsMHz4c165dw/Tp05GRkYEOHTpg8+bNFQaHE1HtIYSAVqtFfHw8Bg4cyNvvRLUYi6Y7hIeHIzw8vMqfK/8/z6oMKCOi6kGr1aKwsBAajYZFE1ENU/69bcwVZBZNZpL335n4fHx8LJwJERERVVVeXh5cXFzuGcMZwc1Er9fj6tWrcHZ2NuqpGyKqPsqnFLl06RKnFCGqYYQQyMvLQ4MGDWBjc+/n41g0ERHdB1+TREQApxwgIiIiMgqLJiIiIiIjsGgiIroPlUqFGTNmVPoWACKqPTimiYiIiMgIvNJEREREZAQWTURERERGYNFEREREZAQWTURERERGYNFERFQFO3bsgEwmQ05OjtGfadKkCb7++uuHlhMRPRosmoiIiIiMwKKJiIiIyAgsmojI6j399NN4++23MXXqVNSpUwdeXl74+OOPpfXR0dHw8/ODo6MjfHx88OabbyI/P19a/88//+C5556Dm5sbHB0d0aZNG8THxxu17/j4eDRv3hz29vbo06cPLl68WCFm9+7d6NWrF+zt7eHj44O3334bBQUFd93mvfItKCiAWq3Gr7/+avCZ9evXw9HREXl5eUblTUTmx6KJiKqFn376CY6Ojti3bx/mzJmDTz75BAkJCQAAGxsbLFiwACdOnMBPP/2Ebdu2YerUqdJnw8LCUFJSgp07d+L48eOYPXs2nJyc7rvPS5cuYejQoXjuuedw5MgRvPbaa5g2bZpBzN9//43+/ftj2LBhOHbsGFatWoXdu3cjPDz8rtu9V76Ojo54+eWXERsba/CZ2NhYvPDCC3B2djb6nBGRmQkiIivXu3dv0bNnT4O2J554Qrz33nuVxq9Zs0bUrVtXWvbz8xMff/xxlfcbGRkpWrdubdD23nvvCQAiOztbCCFESEiIGD9+vEHMrl27hI2NjSgqKhJCCNG4cWMxb968u+7nznz37dsn5HK5uHr1qhBCiMzMTGFrayt27NhR5WMgIvPhlSYiqhbatWtnsFy/fn1kZWUBAP7973+jb9++aNiwIZydnTF69GjcuHEDhYWFAIC3334bn332GXr06IEZM2bg2LFjRu3z1KlT6Natm0Gbv7+/wfLRo0cRFxcHJycn6ScoKAh6vR4XLlyodLv3y7dr165o06YNfvrpJwDAL7/8gsaNG+Opp54yKm8iejhYNBFRtaBQKAyWZTIZ9Ho9Ll68iGeffRbt2rXDb7/9hpSUFCxevBgAUFpaCgB47bXXcP78eYwePRrHjx9Hly5dsHDhQrPklZ+fjzfeeANHjhyRfo4ePYpz587h8ccfrxBvTL7lOcfFxQG4dWtu7NixkMlkZsmZiEzDoomIqrWUlBTo9XrMnTsX3bt3R/PmzXH16tUKcT4+PggNDcXatWvxzjvv4Pvvv7/vtlu1aoX9+/cbtO3du9dguVOnTjh58iSaNm1a4UepVJqc76hRo/DPP/9gwYIFOHnyJIKDg++bLxE9XCyaiKhaa9q0KbRaLRYuXIjz58/j//7v/xATE2MQM2nSJGzZsgUXLlzAoUOHsH37drRq1eq+2w4NDcW5c+cwZcoUnDlzBsuXL5eu/pR77733sGfPHoSHh+PIkSM4d+4cfv/997sOBDcmXwBwc3PD0KFDMWXKFAQGBsLb29v4k0JEDwWLJiKq1tq3b4/o6GjMnj0bbdu2xbJlyxAVFWUQo9PpEBYWhlatWqF///5o3rw5vvnmm/tuu1GjRvjtt9+wfv16tG/fHjExMfjiiy8MYtq1a4ekpCScPXsWvXr1QseOHTF9+nQ0aNDA5HzLhYSEoLS0FOPGjTPybBDRwyQTQghLJ0FERBX93//9HyZPnoyrV69WequPiB4tW0snQEREhgoLC5Geno5Zs2bhjTfeYMFEZCV4e46Iaq3Q0FCDqQJu/wkNDbVYXnPmzEHLli3h5eWFyMhIi+VBRIZ4e46Iaq2srCxoNJpK16nVanh4eDzijIjImrFoIiIiIjICb88RERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGYFFExEREZERWDQRERERGeH/AcPyxkkLO/YYAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_delays=df_cleaned.groupby(by=\"carrier_name\", as_index=False)"
      ],
      "metadata": {
        "id": "pr5gXHqFNcHe"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_delays.size()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "id": "93qZP1GFNdkm",
        "outputId": "198e9136-6017-4633-fd4d-c04679a20275"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               carrier_name  size\n",
              "0      Alaska Airlines Inc.  1851\n",
              "1             Allegiant Air  3158\n",
              "2    American Airlines Inc.  2574\n",
              "3      Delta Air Lines Inc.  3212\n",
              "4         Endeavor Air Inc.  2720\n",
              "5                 Envoy Air  3655\n",
              "6   ExpressJet Airlines LLC  1161\n",
              "7    Frontier Airlines Inc.  2499\n",
              "8    Hawaiian Airlines Inc.   435\n",
              "9               Horizon Air   383\n",
              "10          JetBlue Airways  1541\n",
              "11       Mesa Airlines Inc.  2576\n",
              "12        PSA Airlines Inc.  2331\n",
              "13         Republic Airline  2240\n",
              "14    SkyWest Airlines Inc.  6055\n",
              "15   Southwest Airlines Co.  2406\n",
              "16         Spirit Air Lines  1286\n",
              "17    United Air Lines Inc.  2361"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-87503a2d-6ac9-4e15-becf-f8647502c7e8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carrier_name</th>\n",
              "      <th>size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Alaska Airlines Inc.</td>\n",
              "      <td>1851</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Allegiant Air</td>\n",
              "      <td>3158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>American Airlines Inc.</td>\n",
              "      <td>2574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Delta Air Lines Inc.</td>\n",
              "      <td>3212</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>2720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Envoy Air</td>\n",
              "      <td>3655</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>ExpressJet Airlines LLC</td>\n",
              "      <td>1161</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Frontier Airlines Inc.</td>\n",
              "      <td>2499</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Hawaiian Airlines Inc.</td>\n",
              "      <td>435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Horizon Air</td>\n",
              "      <td>383</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>JetBlue Airways</td>\n",
              "      <td>1541</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Mesa Airlines Inc.</td>\n",
              "      <td>2576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>PSA Airlines Inc.</td>\n",
              "      <td>2331</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Republic Airline</td>\n",
              "      <td>2240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>SkyWest Airlines Inc.</td>\n",
              "      <td>6055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>2406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Spirit Air Lines</td>\n",
              "      <td>1286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>United Air Lines Inc.</td>\n",
              "      <td>2361</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87503a2d-6ac9-4e15-becf-f8647502c7e8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-87503a2d-6ac9-4e15-becf-f8647502c7e8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-87503a2d-6ac9-4e15-becf-f8647502c7e8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f75159c-992d-4461-8308-c65aa541e0e9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f75159c-992d-4461-8308-c65aa541e0e9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f75159c-992d-4461-8308-c65aa541e0e9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_delays\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"carrier_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Alaska Airlines Inc.\",\n          \"Allegiant Air\",\n          \"Hawaiian Airlines Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1285,\n        \"min\": 383,\n        \"max\": 6055,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1851,\n          3158,\n          435\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_delays=df_delays[\"arr_del15\"].mean()"
      ],
      "metadata": {
        "id": "eOnpa_yLNfJf"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "df_delays=df_delays.sort_values(by=[\"arr_del15\"], ascending=False)\n",
        "df4=df_cleaned.sort_values(by=[\"arr_del15\"], ascending=False)\n",
        "\n",
        "\n",
        "# Create a bar plot\n",
        "sns.barplot(data=df_delays, x=\"arr_del15\", y=\"carrier_name\", color=\"mediumpurple\",errorbar=None) # different parameters are added to the varplot function (color, graph orientation)\n",
        "plt.title(\"Average number of delayed flights among different airlines\")  # We are putting a title to the graph\n",
        "plt.ylabel(\"\") # We are changing the y axis label\n",
        "plt.xlabel(\"Average # of Delayed flights\") # We are changing the x axis label\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "kgi3fU69Nh4W",
        "outputId": "d3d1b274-f283-4e0e-87b5-67b579e568b0"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_delays_carrier=df_cleaned.groupby(by=\"carrier_name\", as_index=False)"
      ],
      "metadata": {
        "id": "5PiI9EmnS8Dz"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_delays_carrier=df_delays_carrier[[\"arr_del15\", \"arr_cancelled\"]].mean()"
      ],
      "metadata": {
        "id": "znAiVI1xS-ie"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a bar plot showing arrival delay and cancellation percentages by carrier\n",
        "colours= ['blue', 'red']\n",
        "df_delays_carrier.plot(kind=\"bar\", figsize=(10, 7))\n",
        "\n",
        "# Customize the plot (optional)\n",
        "plt.title(\"Arrival Delay and Cancellation Percentages by Carrier\")\n",
        "plt.xlabel(\"Carrier Name\")\n",
        "plt.ylabel(\"Percentage\")\n",
        "plt.xticks(rotation=45)  # Rotate x-axis labels for readability\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 650
        },
        "id": "uQ7WVbzvN49v",
        "outputId": "14b5e579-6d0f-4f8b-ff8e-b5906abadce2"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a bar plot showing arrival delay and cancellation percentages by carrier\n",
        "df_delays_carrier.plot(kind=\"bar\", figsize=(10, 7))\n",
        "\n",
        "# Customize the plot (optional)\n",
        "plt.title(\"Arrival Delay and Cancellation Percentages by Carrier\")\n",
        "plt.xlabel(\"Carrier Name\")\n",
        "plt.ylabel(\"Percentage\")\n",
        "plt.xticks(rotation=45)  # Rotate x-axis labels for readability\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 650
        },
        "id": "O8McvwvQODB-",
        "outputId": "d4ba071e-b736-4ade-c3be-9558a82bab90"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1IAAAJ5CAYAAACkOgFGAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABsI0lEQVR4nO3dd3QUZeP28WuTQAKBJIQWkJJQg4BKE0GakEdUQGlSRJo0KUoREZQm0kVEfBAUBVuQIohYABUQHxSR3jsJTUIoJjGUhGTv9w/e7I81ATIhYTfx+zkn52RnZmeu3Z0t105ZmzHGCAAAAACQbh6uDgAAAAAA2Q1FCgAAAAAsokgBAAAAgEUUKQAAAACwiCIFAAAAABZRpAAAAADAIooUAAAAAFhEkQIAAAAAiyhSAAAAAGARRQr4Fxs7dqxsNluWLiM4OFjdunXL0mVkhwxZ6W48ju4mMjJSNptNH3/8sWNYVtwPP//8s2w2m37++edMnS9ylo8//lg2m01btmxxdZS75t/4ugP8E0UKyAbee+892Ww21a5d29VRsozNZnP8eXl5KTAwUDVq1NDAgQO1b98+V8fLUX7++We1bt1aQUFByp07t4oUKaIWLVpo2bJlro7mMu+9955TKXMHjRo1cnpeBAYGqlatWpo3b57sdrur492xBQsWaMaMGa6OkS3xHAbcA0UKyAbCw8MVHBysP/74Q0eOHMm0+Y4cOVJXrlzJtPndqf/85z/67LPPNH/+fI0bN07Vq1fXJ598ovvvv1/Tp093dbwcYcyYMXrkkUe0Z88e9enTR3PmzNHLL7+s+Ph4tWnTRgsWLHB1RJe4WZFq0KCBrly5ogYNGtz9UJJKlCihzz77TJ999plGjRqlpKQk9ejRQ6+++qpL8mQmilTGuMtz2N3ePwBX8HJ1AAC3FhERod9++03Lli1Tnz59FB4erjFjxtz2eklJSbLb7cqdO3eqcZcuXZKvr6+8vLzk5eU+LwMVKlTQs88+6zRs8uTJatGihV566SWFhobqiSeecFG67O/LL7/UuHHj1LZtWy1YsEC5cuVyjHv55Ze1evVqXbt2zYUJ3Y+Hh4d8fHxctnx/f3+n50SfPn1UsWJF/fe//9Ubb7zh9BhadavXCLinu/UcdsX7x+XLl5U3b95Mmx9wN7BFCnBz4eHhKlCggJo1a6a2bdsqPDw81TQpx4tMmzZNM2bMUNmyZeXt7a19+/Y59mPft2+fnnnmGRUoUED16tWTlHof9ypVquiRRx5JNX+73a577rlHbdu2dQybNm2a6tatq4IFCypPnjyqUaOGvvzyy0y//QULFtTChQvl5eWlCRMmOI1LSEjQmDFjVK5cOXl7e6tkyZIaNmyYEhISbjnPixcvaujQoapatary5csnPz8/Pf7449q5c6djmvj4ePn6+mrgwIGprn/q1Cl5enpq0qRJt1xOeu8jm82mAQMGaPny5apSpYq8vb1VuXJlrVq1KtW0GzZsUK1ateTj46OyZcvq/fffv2WGG40aNUqBgYGaN29emh/AmzZtqubNm0uSEhMTNXr0aNWoUUP+/v7y9fVV/fr1tW7dOqfr3LjuffDBB451r1atWtq8eXOqZRw4cEDt2rVT4cKFlSdPHlWsWFGvvfaa0zSnT5/Wc889p6JFizrui3nz5qX7dt5o/vz5aty4sYoUKSJvb2/de++9mj17ttM0wcHB2rt3r9avX+/Yja5Ro0aSbn6M1JIlS1SjRg3lyZNHhQoV0rPPPqvTp087TdOtWzfly5dPp0+fVsuWLZUvXz4VLlxYQ4cOVXJycoZuT968efXQQw/p0qVLOnfunCQpJiZGgwYNUsmSJeXt7a1y5cppypQpTrv/3eo1Qsq8xyXl/lq8eLEmTJigEiVKyMfHR02aNHHamt6oUSN99913On78uOM+Dw4OlpT+dU+SLly4oM6dO8vPz08BAQHq2rWrdu7cmer4uZTb2LZtWwUGBsrHx0c1a9bUihUrnKa5du2aXn/9dZUvX14+Pj4qWLCg6tWrpx9//DFdj8/ly5fVp08fFSxYUH5+furSpYv++usvx/iuXbuqUKFCaZadRx99VBUrVrzl/LP6OXwn7x8pPv/8c8dzIzAwUB06dNDJkyedpmnUqJGqVKmirVu3qkGDBsqbN2+O2MqKfx/3+SoaQJrCw8PVunVr5c6dWx07dtTs2bO1efNm1apVK9W08+fP19WrV9W7d295e3srMDDQMe7pp59W+fLlNXHiRBlj0lxW+/btNXbsWEVFRSkoKMgxfMOGDfrzzz/VoUMHx7B33nlHTz75pDp16qTExEQtXLhQTz/9tL799ls1a9YsE+8BqVSpUmrYsKHWrVunuLg4+fn5yW6368knn9SGDRvUu3dvVapUSbt379bbb7+tQ4cOafny5Ted37Fjx7R8+XI9/fTTCgkJ0dmzZ/X++++rYcOG2rdvn4oXL658+fKpVatWWrRokaZPny5PT0/H9b/44gsZY9SpU6db5rZyH23YsEHLli1Tv379lD9/fs2cOVNt2rTRiRMnVLBgQUnS7t279eijj6pw4cIaO3askpKSNGbMGBUtWvS29+Hhw4d14MABPffcc8qfP/9tp4+Li9OHH36ojh07qlevXvr777/10UcfqWnTpvrjjz/0wAMPOE2/YMEC/f333+rTp49sNpumTp2q1q1b69ixY44PfLt27VL9+vWVK1cu9e7dW8HBwTp69Ki++eYbR0k+e/asHnroIUe5LFy4sFauXKkePXooLi5OgwYNum32G82ePVuVK1fWk08+KS8vL33zzTfq16+f7Ha7+vfvL0maMWOGXnjhBeXLl89RHm51n3788cfq3r27atWqpUmTJuns2bN655139Ouvv2r79u0KCAhwTJucnKymTZuqdu3amjZtmn766Se99dZbKlu2rPr27WvptqQ4duyYPD09FRAQoMuXL6thw4Y6ffq0+vTpo1KlSum3337TiBEjdObMmVS7zqX1GpEVj8vkyZPl4eGhoUOHKjY2VlOnTlWnTp20adMmSdJrr72m2NhYnTp1Sm+//bYkKV++fJLSv+7Z7Xa1aNFCf/zxh/r27avQ0FB9/fXX6tq1a6r7bO/evXr44Yd1zz33aPjw4fL19dXixYvVsmVLLV26VK1atZJ0vRxMmjRJPXv21IMPPqi4uDht2bJF27Zt03/+85/bPjYDBgxQQECAxo4dq4MHD2r27Nk6fvy4o2B27txZn376qVavXu0oPJIUFRWltWvX3nJvg6x+Dt/p+4ckTZgwQaNGjVK7du3Us2dPnTt3Tu+++64aNGiQ6rlx4cIFPf744+rQoYOeffbZdL2OAW7HAHBbW7ZsMZLMjz/+aIwxxm63mxIlSpiBAwc6TRcREWEkGT8/PxMdHe00bsyYMUaS6dixY6r5p4xLcfDgQSPJvPvuu07T9evXz+TLl89cvnzZMezG/40xJjEx0VSpUsU0btzYaXjp0qVN165db3tbJZn+/fvfdPzAgQONJLNz505jjDGfffaZ8fDwMP/73/+cppszZ46RZH799debZrh69apJTk52ul5ERITx9vY248aNcwxbvXq1kWRWrlzpNO19991nGjZseNvblN77SJLJnTu3OXLkiGPYzp07Uz0WLVu2ND4+Pub48eOOYfv27TOenp7mdi/nX3/9tZFk3n777dvmNsaYpKQkk5CQ4DTsr7/+MkWLFjXPPfecY1jKulewYEFz8eLFVMv75ptvHMMaNGhg8ufP75TfmOvrdYoePXqYYsWKmfPnzztN06FDB+Pv7++4T1OWO3/+fMc0/1yfjUn9GBhjTNOmTU2ZMmWchlWuXDnNx3TdunVGklm3bp0x5vpjWKRIEVOlShVz5coVx3TffvutkWRGjx7tGNa1a1cjyWmdMsaYatWqmRo1aqRa1j81bNjQhIaGmnPnzplz586Z/fv3mxdffNFIMi1atDDGGPPGG28YX19fc+jQIafrDh8+3Hh6epoTJ04YY279GpGZj0vK/VWpUiWn9eedd94xkszu3bsdw5o1a2ZKly6d6nand91bunSpkWRmzJjhGJacnGwaN26cat1o0qSJqVq1qrl69arT7atbt64pX768Y9j9999vmjVrlirT7cyfP99IMjVq1DCJiYmO4VOnTjWSzNdff+3IV6JECdO+fXun60+fPt3YbDZz7Nixmy4jq5/Dd/r+ERkZaTw9Pc2ECROcptu9e7fx8vJyGt6wYUMjycyZMyddtwVwV+zaB7ix8PBwFS1a1LG7nc1mU/v27bVw4cI0dw1q06aNChcunOa8nn/++dsur0KFCnrggQe0aNEix7Dk5GR9+eWXatGihfLkyeMYfuP/f/31l2JjY1W/fn1t27Yt3bfPipRvq//++29J13etqlSpkkJDQ3X+/HnHX+PGjSUpzd2AUnh7e8vD4/rLX3Jysi5cuKB8+fKpYsWKTvnDwsJUvHhxp90p9+zZo127dqU6listVu6jsLAwlS1b1nH5vvvuk5+fn44dO+bIuXr1arVs2VKlSpVyTFepUiU1bdr0tlni4uIkKV3fZEuSp6en4/gIu92uixcvKikpSTVr1kwzf/v27VWgQAHH5fr160uSI/+5c+f0yy+/6LnnnnPKL8mxe5AxRkuXLlWLFi1kjHF6XJs2barY2FjL69eNj0FsbKzOnz+vhg0b6tixY4qNjbU0L0nasmWLoqOj1a9fP6djp5o1a6bQ0FB99913qa7zz+de/fr1HffL7Rw4cECFCxdW4cKFValSJb377rtq1qyZY5e6JUuWqH79+ipQoIDT/RUWFqbk5GT98ssvTvP752tEVj0u3bt3dzq+5p/rw62kd91btWqVcuXKpV69ejmGeXh4OLY0prh48aLWrl2rdu3a6e+//3Zkv3Dhgpo2barDhw87dssMCAjQ3r17dfjw4dvmTEvv3r2ddrnr27evvLy89P333zvyderUSStWrHC8lknXX+vr1q2rkJCQm847q5/Dd/r+sWzZMtntdrVr185pHQkKClL58uVTvSZ7e3ure/fu6botgLti1z7ATSUnJ2vhwoV65JFHFBER4Rheu3ZtvfXWW1qzZo0effRRp+vc6k34VuNu1L59e7366qs6ffq07rnnHv3888+Kjo5W+/btnab79ttvNX78eO3YscPpmKSs+l2R+Ph4Sf/3IeLw4cPav3//Td/4o6Ojbzovu92ud955R++9954iIiKcSmnKbnTS/33omT17tuNA6PDwcPn4+Ojpp5++bWYr99E/P8RKUoECBRzHV5w7d05XrlxR+fLlU01XsWJFxwe1m/Hz85Mkpw9vt/PJJ5/orbfe0oEDB5yO6UhrXfpn/pRSlZI/5QN0lSpVbrq8c+fOKSYmRh988IE++OCDNKe51eOall9//VVjxozRxo0bdfnyZadxsbGx8vf3tzS/48ePS1Kax7KEhoZqw4YNTsN8fHxSraM3Pq63ExwcrLlz58pms8nHx0fly5dXkSJFHOMPHz6sXbt2pft58M/HLqsel9utD7eTnnXv+PHjKlasWKoTFJQrV87p8pEjR2SM0ahRozRq1Kib5r/nnns0btw4PfXUU6pQoYKqVKmixx57TJ07d9Z9992Xrtz/fH7my5dPxYoVU2RkpGNYly5dNGXKFH311Vfq0qWLDh48qK1bt2rOnDm3nHdWP4fv9P3j8OHDMsak+RolKdUxXffccw8nOkG2R5EC3NTatWt15swZLVy4UAsXLkw1Pjw8PFWRuvHb93+61bgbtW/fXiNGjNCSJUs0aNAgLV68WP7+/nrssccc0/zvf//Tk08+qQYNGui9995TsWLFlCtXLs2fPz/LTr27Z88eeXp6Ot7Q7Xa7qlatetPTopcsWfKm85o4caJGjRql5557Tm+88YYCAwPl4eGhQYMGpfp9ni5duujNN9/U8uXL1bFjRy1YsEDNmze/7Qdwq/fRjcdg3cjc4ngEK0JDQyVdP84qPT7//HN169ZNLVu21Msvv6wiRYo4TrBx9OjRVNNnRv6U+/7ZZ59N8zgXSen+QCtJR48eVZMmTRQaGqrp06erZMmSyp07t77//nu9/fbbd+W3mG52v6SXr6+vwsLCbjrebrfrP//5j4YNG5bm+AoVKjhdTu/rwD+XIVl7XO5kfbC67t1OSv6hQ4fedOttSvlq0KCBjh49qq+//lo//PCDPvzwQ7399tuaM2eOevbsaXnZabn33ntVo0YNff755+rSpYs+//xz5c6dW+3atbvl9bL6OXyn7x92u102m00rV65M8/FP2avAyjwBd0eRAtxUeHi4ihQpolmzZqUat2zZMn311VeaM2dOpr8ZhYSE6MEHH9SiRYs0YMAALVu2TC1btpS3t7djmqVLl8rHx0erV692Gj5//vxMzZLixIkTWr9+verUqePYIlW2bFnt3LlTTZo0sbwV7Msvv9Qjjzyijz76yGl4TEyMChUq5DSsSpUqqlatmsLDw1WiRAmdOHFC77777m2Xkdn3UcrZ1NLa5ejgwYO3vX6FChVUsWJFff3113rnnXdSfaj5py+//FJlypTRsmXLnO7f9Jx6Py1lypSRdL0Q30zhwoWVP39+JScn37I8pNc333yjhIQErVixwmkLSVq7faZ3HSpdurSk6/d5ym6kKQ4ePOgYf7eULVtW8fHxGb6/XPG4pLjZfZ7eda906dJat25dqtNm//O39lJuY65cudKVPzAwUN27d1f37t0VHx+vBg0aaOzYsekqUocPH3Y682l8fLzOnDmT6mcbunTpoiFDhujMmTNasGCBmjVr5rRrbFpc/Ry+nbJly8oYo5CQkFQFHsipOEYKcENXrlzRsmXL1Lx5c7Vt2zbV34ABA/T333+nOnVvZmnfvr1+//13zZs3T+fPn0+1W5+np6dsNpvTLnGRkZG3PFNeRl28eFEdO3ZUcnKy0+mY27Vrp9OnT2vu3LmprnPlyhVdunTppvP09PRM9c34kiVLUp2+OkXnzp31ww8/aMaMGSpYsKAef/zx2+bO7PvI09NTTZs21fLly3XixAnH8P3792v16tXpmsfrr7+uCxcuqGfPnkpKSko1/ocfftC3337rWJ7kvAVh06ZN2rhxY4byFy5cWA0aNNC8efOc8t+4DE9PT7Vp00ZLly5N84N9yum+0yut2xAbG5tmmfX19VVMTMxt51mzZk0VKVJEc+bMcdpdc+XKldq/f3+mn7Hydtq1a6eNGzemuQ7ExMSk+TjfyBWPSwpfX980j1NL77rXtGlTXbt2zek1wG63p/ryqUiRImrUqJHef/99nTlz5pb5L1y44DQuX758Kleu3G1/UiHFBx984LQL3ezZs5WUlJTqNaNjx46y2WwaOHCgjh07lq5jLiXXPodvp3Xr1vL09NTrr7+e6vXVGJPqvgVyArZIAW4o5UDkJ598Ms3xDz30kAoXLqzw8PBUJScztGvXTkOHDtXQoUMVGBiY6lvcZs2aafr06Xrsscf0zDPPKDo6WrNmzVK5cuW0a9euDC/30KFD+vzzz2WMUVxcnHbu3KklS5YoPj7esbwUnTt31uLFi/X8889r3bp1evjhh5WcnKwDBw5o8eLFWr16tWrWrJnmcpo3b65x48ape/fuqlu3rnbv3q3w8HDHN9f/9Mwzz2jYsGH66quv1Ldv33T9CGpW3Eevv/66Vq1apfr166tfv35KSkrSu+++q8qVK6drnu3bt9fu3bs1YcIEbd++XR07dlTp0qV14cIFrVq1SmvWrHHsdti8eXMtW7ZMrVq1UrNmzRQREaE5c+bo3nvvdRyvZtXMmTNVr149Va9eXb1791ZISIgiIyP13XffaceOHZKunzZ73bp1ql27tnr16qV7771XFy9e1LZt2/TTTz/p4sWL6V7eo48+qty5c6tFixbq06eP4uPjNXfuXBUpUiTVB+oaNWpo9uzZGj9+vMqVK6ciRYqk2uIkXd+qMWXKFHXv3l0NGzZUx44dHac/Dw4O1uDBgzN032TUyy+/rBUrVqh58+bq1q2batSooUuXLmn37t368ssvFRkZmWor6z/d7cclRY0aNbRo0SINGTJEtWrVUr58+dSiRYt0r3stW7bUgw8+qJdeeklHjhxRaGioVqxY4chy41aYWbNmqV69eqpatap69eqlMmXK6OzZs9q4caNOnTrl+A25e++9V40aNVKNGjUUGBioLVu26Msvv9SAAQPSdZsSExPVpEkTtWvXTgcPHtR7772nevXqpXotL1y4sB577DEtWbJEAQEB6S7grn4O30rZsmU1fvx4jRgxQpGRkWrZsqXy58+viIgIffXVV+rdu7eGDh2a6csFXOruniQQQHq0aNHC+Pj4mEuXLt10mm7duplcuXKZ8+fPO05f++abb6aaLuUUtefOnbvpuLQ8/PDDRpLp2bNnmuM/+ugjU758eePt7W1CQ0PN/Pnz05yfldOfp/x5eHiYgIAAU61aNTNw4ECzd+/eNK+TmJhopkyZYipXrmy8vb1NgQIFTI0aNczrr79uYmNjb5rh6tWr5qWXXjLFihUzefLkMQ8//LDZuHGjadiw4U1Pa/7EE08YSea333677W1Jkd77SDc59Xta99369etNjRo1TO7cuU2ZMmXMnDlzbvk4pmXNmjXmqaeeMkWKFDFeXl6mcOHCpkWLFo5TNBtz/dTQEydONKVLlzbe3t6mWrVq5ttvvzVdu3Z1OmX1rdY9SWbMmDFOw/bs2WNatWplAgICjI+Pj6lYsaIZNWqU0zRnz541/fv3NyVLljS5cuUyQUFBpkmTJuaDDz5Itdzbnf58xYoV5r777jM+Pj4mODjYTJkyxcybN89IMhEREY7poqKiTLNmzUz+/PmNJMd68M/Tn6dYtGiRqVatmvH29jaBgYGmU6dO5tSpU07TdO3a1fj6+qa6X9L7eDVs2NBUrlz5ttP9/fffZsSIEaZcuXImd+7cplChQqZu3bpm2rRpjlNx3+pxMibzHpeU+2vJkiVO103r8YqPjzfPPPOMCQgIMJIc61V61z1jjDl37px55plnTP78+Y2/v7/p1q2b+fXXX40ks3DhQqdpjx49arp06WKCgoJMrly5zD333GOaN29uvvzyS8c048ePNw8++KAJCAgwefLkMaGhoWbChAlOpzRPS8rpz9evX2969+5tChQoYPLly2c6depkLly4kOZ1Fi9ebCSZ3r1733Leablbz+GMvH8sXbrU1KtXz/j6+hpfX18TGhpq+vfvbw4ePOiYJr3rNuDubMZk0pHMAJCDtWrVSrt37051/AUA97J8+XK1atVKGzZs0MMPP+zqODf19ddfq2XLlvrll18cp4cHkL1wjBQA3MaZM2f03XffqXPnzq6OAuAGV65ccbqcnJysd999V35+fqpevbqLUqXP3LlzVaZMGdWrV8/VUQBkEMdIAcBNRERE6Ndff9WHH36oXLlyqU+fPq6OBOAGL7zwgq5cuaI6deooISFBy5Yt02+//aaJEye67em1Fy5cqF27dum7777TO++8k2W/vQcg67FrHwDcxMcff6zu3burVKlSeuutt9S2bVtXRwJwgwULFuitt97SkSNHdPXqVZUr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6tVTQECAChYsqObNm+vo0aOSpMjISNlsNi1atEgNGzaUj4+PwsPD1a1bN7Vs2VITJkxQ8eLFVbFixdsuJyEhQa+88opKliwpb29vlStXTh999JEkKTk5WT169FBISIjy5MmjihUr6p133nG6fsoyp02bpmLFiqlgwYLq37+/U7G71TIkac+ePXr88ceVL18+FS1aVJ07d9b58+fTfV/FxMSoZ8+eKly4sPz8/NS4cWPt3LnTaZrJkyeraNGiyp8/v3r06KGrV6+me/4AAADIWShSOdilS5c0ZMgQbdmyRWvWrJGHh4datWolu93umGb48OEaOHCg9u/fr6ZNm0qS1qxZo4MHD+rHH3/Ut99+e9vldOnSRV988YVmzpyp/fv36/3331e+fPkkSXa7XSVKlNCSJUu0b98+jR49Wq+++qoWL17sNI9169bp6NGjWrdunT755BN9/PHH+vjjj9O1jJiYGDVu3FjVqlXTli1btGrVKp09e1bt2rVL93319NNPKzo6WitXrtTWrVtVvXp1NWnSRBcvXpQkLV68WGPHjtXEiRO1ZcsWFStWTO+991665w8AAICchWOkcrA2bdo4XZ43b54KFy6sffv2OUrIoEGD1Lp1a6fpfH199eGHHyp37ty3XcahQ4e0ePFi/fjjjwoLC5MklSlTxjE+V65cev311x2XQ0JCtHHjRi1evNip6BQoUED//e9/5enpqdDQUDVr1kxr1qxRr169bruM//73v6pWrZomTpzodFtLliypQ4cOqUKFCre8DRs2bNAff/yh6OhoeXt7S5KmTZum5cuX68svv1Tv3r01Y8YM9ejRQz169JAkjR8/Xj/99BNbpQAAAP6l2CKVgx0+fFgdO3ZUmTJl5Ofnp+DgYEnSiRMnHNPUrFkz1fWqVq2arhIlSTt27JCnp6caNmx402lmzZqlGjVqqHDhwsqXL58++OADpwySVLlyZXl6ejouFytWTNHR0elaxs6dO7Vu3Trly5fP8RcaGipJjl0Zb2Xnzp2Kj49XwYIFneYRERHhuP7+/ftVu3Ztp+vVqVPntvMGAABAzsQWqRysRYsWKl26tObOnavixYvLbrerSpUqTieQ8PX1TXW9tIbdTJ48eW45fuHChRo6dKjeeust1alTR/nz59ebb76pTZs2OU2XK1cup8s2m82xC+LtlhEfH68WLVpoypQpqcYVK1bstrchPj5exYoV088//5xqXEBAwG2vDwAAgH8filQOdeHCBR08eFBz585V/fr1JV3fhS2zVa1aVXa7XevXr3fsdnejX3/9VXXr1lW/fv0cw9KzlcjKMqpXr66lS5cqODhYXl7WV+nq1asrKipKXl5ejq12/1SpUiVt2rRJXbp0cQz7/fffLS8LAAAAOQO79uVQBQoUUMGCBfXBBx/oyJEjWrt2rYYMGZLpywkODlbXrl313HPPafny5YqIiNDPP//sOJlE+fLltWXLFq1evVqHDh3SqFGjtHnz5kxdRv/+/XXx4kV17NhRmzdv1tGjR7V69Wp1795dycnJt51/WFiY6tSpo5YtW+qHH35QZGSkfvvtN7322mvasmWLJGngwIGaN2+e5s+fr0OHDmnMmDHau3evxXsLAAAAOQVFKofy8PDQwoULtXXrVlWpUkWDBw/Wm2++mSXLmj17ttq2bat+/fopNDRUvXr10qVLlyRJffr0UevWrdW+fXvVrl1bFy5ccNo6lRnLKF68uH799VclJyfr0UcfVdWqVTVo0CAFBATIw+P2q7jNZtP333+vBg0aqHv37qpQoYI6dOig48ePq2jRopKk9u3ba9SoURo2bJhq1Kih48ePq2/fvpZvBwAAAHIGmzHGuDqEq8XFxcnf31+xsbHy8/NzGnf16lVFREQoJCREPj4+LkqI7Ih1BwCAnC14+HfpnjZycrMsTILMdKtucCO2SAEAAACARRQp3NL//vc/p1OC//MPAAAA+DfirH24pZo1a2rHjh2ujgEAAAC4FYoUbilPnjwqV66cq2MAAAAAboVd+wAAAADAIopUOnFyQ1jFOgMAAJBzUaRuw9PTU5KUmJjo4iTIbi5fvixJypUrl4uTAAAAILO59BipX375RW+++aa2bt2qM2fO6KuvvlLLli0lSdeuXdPIkSP1/fff69ixY/L391dYWJgmT56s4sWLO+Zx8eJFvfDCC/rmm2/k4eGhNm3a6J133sm0M8p5eXkpb968OnfunHLlypWuH3jFv5sxRpcvX1Z0dLQCAgIcZRwAAAA5h0uL1KVLl3T//ffrueeeU+vWrZ3GXb58Wdu2bdOoUaN0//3366+//tLAgQP15JNPasuWLY7pOnXqpDNnzujHH3/UtWvX1L17d/Xu3VsLFizIlIw2m03FihVTRESEjh8/ninz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SEhQr169XB1RklSnTh2dPHlSX3/9tebMmaNr167pgQceUHBwsGbOnKk9e/Zo9OjRKlWqlKujKiYmRgcPHtT58+f18ssvS5I+/PBD/fnnn1q7dq1Gjhwpf39/p/XEFRISEjRs2DCNGzfO8bwaP368ateurdmzZ6tv375u89ySrr/GnjhxQjt27FC1atU0YcIErVy5UomJiYqNjdXx48c1ZcoUdevWzeU5r1y5osTERB09elRJSUny8fHR6dOntWjRIo0ZM0Zr167V999/r6FDh7o06z/lzp1bZ8+eVUhIiKTrt6VcuXKaOnWqxowZoy+//FIhISFq0aKFi5NK27dvV3BwsAYPHiy73a7HH39cPXv21Icffig/Pz9Xx3Ow2+1auHChypUrp1dffdWx22ytWrWUK1cutzoeMTk5WUuXLtXjjz+u4cOHO4afOnVKe/fu1cMPP6waNWroiSeeUIsWLdzm9cEYo99++03z589XcnKyPvjgA+XPn1/r169XpUqVNGHCBJfmS0pK0n//+1/ly5dPDzzwgCSpZcuWOnXqlOLi4nTixAm1adNGI0aMULVq1VyaNcW2bdscn7GeeOIJJSUl6f7779e+ffu0ZcsWHThwQBMnTnTpOnDp0iU1bNhQvXv3djzGHTp00IcffqjRo0dr9erV8vK6i/XmrlW2HO7IkSOmUKFC5rnnnjN///23Meb/GvuJEyeMzWYzK1eudGVEY4xJ9e3HwoULjc1mM0OHDjXnz583xlxv8seOHXNFPCc3fmOX8o3YyJEjTefOnZ2mS7m/XSkuLs7x/xdffGFsNptZtGiRuXDhglm/fr2pVauWW+4i0aVLFzN8+HBjjDE9evQwBQoUMPfee6957rnn3GLXqT///NN06dLF5MmTx/znP/9xrKPGGBMeHm4CAgLM999/78KE/8dut5sOHTqYAQMGmObNm5tVq1Y5xp08edI8++yz5vnnnzdJSUku/zbvRna73cTExJiWLVuadu3auV2+Y8eOmbp165py5cqZNm3aGJvNZpYvX27sdrs5e/asefHFF02jRo3M+fPn3SL3hg0bjIeHh2nQoIHp3Lmz8fX1NT179jTGGLN7926TP39+c+DAAbfIasz1Lb2JiYmme/fupm3btubq1avGbrc7vtE9evSoqVOnjmnfvr2Lk14XHR1t1q1b57i8ceNGExgYaJ5++mkTExPjGO4O9+/69esdr68pkpOTTXBwsNNtcAcnT540GzdudFx+4403jKenp3nttdfMzJkzTa1atUzjxo1dsuvUrTz66KMmIiLCGGPM1KlTja+vr/H39zerV692bbD/79ChQ6Z3797moYceMiVLljRPPPGE2b9/v7l8+bLZsmWLueeee0yXLl1cHdPhxx9/NI0bNzYffvih+c9//mNOnTpljDEmJibGvP766+ahhx4ye/fudXFK43jMjbn+GmaMMXPnzjUVKlQwW7duNcbcva1SFKlMtHbtWuPt7W369+/vtLvcmTNnzP33329+++03F6ZzduOHpZQP/i+//LI5ffq0GTx4sGndurW5dOmSi1Ned+OT4bXXXnPs6mWMMRMnTjRvvfWWuXbtmiuipSkyMtLxRE7RrFkz06JFCxclSi3lsf/444/NmDFjTN++fU2xYsXMsWPHzLJly0zZsmXN888/79g1yZVOnz5tRowYYdasWWOMcf6AVK5cuVvuy323bd682fj6+hqbzWZWrFjhNO6ll14yDRo0cIsPeGlZunSpsdlsjl0j3MmxY8fMokWLzJgxY0zbtm2dxk2ePNncf//9brGupvjjjz/Ms88+a3r27GlmzZrlGP7111+bSpUqOX3gd5WUDx8pfv75Z+Pp6em0G1/KND///LPx8PBwHEN5t/0za4qU94bff//dUaZiY2NNYmKiee+998wPP/xwN2MaY26eNeV5n5ycbEJCQpyy/fTTTyY6Ovqu5LvRzbKeP3/eDBo0yOnL33379rn0C+GbZW3UqJFjl7MePXoYPz8/ExQUZKZOnWpOnz59NyM6/DPrkSNHTOfOnU2zZs3MgQMHnMatWLHC2Gw2c/DgwbsZ0eGfWffv32+KFy9u7r33XhMWFuY07sSJEyZv3rxmwYIFdzOiw41Z03of/fvvv03JkiVN//7972YsilRmW7FihfH29jatW7c2CxcuNPv27TPDhw83xYoVMydPnnR1PCc3fuu4cOFCkytXLlOxYkXj5eXldid0SHnSvPbaa+bxxx83xhgzatQoY7PZzI4dO1wZ7ZaSk5PNlStXTPv27c2ECRNcHSeV9evXG5vNZoKCgsyWLVscw7/66iu32CqZIjY21ukEE3a73Zw/f97UqVPHhIeHuzBZar/88oux2WymefPmTh88X3zxRdOzZ89Uxxu4i4SEBPPoo4+aTp06mcuXL7s6Tprmzp1rmjVr5rQuDB482Dz11FNud6xBWm/0Q4cONY0aNXL5MT0HDx4006ZNM3/++afT8GnTphkPDw+nE0wYY8zWrVtNpUqVnL4FvltulvWfNm3aZAIDA027du1M9+7dTa5cucyRI0fuUsrr0sp643pw7do1Ex8fb8qVK2d+//13Y4wxI0aMMDab7a5/6L/d/ZryRWrK54Rdu3aZ6tWrm127dt3NmMaYtLOmvI6+8sor5rPPPjMvvPCCKV68uDl27JiZOHGiyZs3r3nrrbduWsDuZlZjrp/EYeXKlY7cKevFl19+aUJDQ11ybNfNsn777bfGy8vLFClSxGkDQEJCgmncuLHT3hZ3y+3W15THedasWaZs2bJOn2eyGkUqC2zdutU0bNjQlC5d2pQtW9ZUqFDBbNu2zdWx0nTjmW0aN25sAgMDXfJCeTsphW/MmDGmd+/e5s033zTe3t6ptvy4o1GjRplSpUq53cHFxlx/M/roo4/Mzp07jTHusTtMeo0ePdqUL1/eREZGujpKKuvXrzfFixc3Dz74oOnRo4fp3Lmz8ff3N7t373Z1tFuaNGmS8fPzc7vdd1KknFlu6tSp5tNPPzXDhg0zAQEBbvmadaNdu3aZfv36GT8/P5d/8XOrM7deunTJvP7668Zms5mRI0eabdu2mQsXLpjhw4ebcuXK3fWtJlbPMrthwwZjs9lMYGDgXX9vSE/WlC/WUj7ojRs3zvj6+po//vjDbbKmvAf8873g1VdfNbVr13a7dWDevHnGZrOZYsWKmc2bNzuGT5ky5a6/594u682+XGnatOld/3Lldlm/+OIL4+HhYZo2bWq++OILc/jwYTN8+HBTvHjxu37yLCuvAym7S964J0BWo0hlkdjYWBMREWF27drllmfFu1FSUpIZPHiwsdlsjg/U7mr8+PHGZrMZf39/pxdNd7R48WLTv39/U7BgQbct0sa4z6nO0+uLL74wvXv3NgUKFHDr+/XAgQNm5MiRJiwszPTt29etS1TKG/zFixdNjRo1XLLlIb3Wrl1rypYta8qXL28aNWrk9q9ZV69eNcuWLTMdOnRwedabnbn1xg/HycnJ5pNPPjFBQUHmnnvuMaGhoaZ48eJ3vZhYPctsQkKCef75503+/Pnv+jEcVrNWq1bN1KpVy+TOnfuuv49Zzbp3714zcuRI4+fnd9fX3/RkPXjwoBk5cqRjLxpXvZ+lJ+uNRWrPnj3mtddeM35+fnf9i6D0rgM//fSTqVOnjilatKgJDQ11yUaBjJxtumvXrqZixYomMTHxrnw5TJGCSUpKMh9++KHb7c6Xls2bNxubzeYWBzvezp49e0y7du3Mvn37XB0lR9m5c6dp1qyZy47XsCo5OTnblFW73e52u8il5cKFCyYqKsrtTnV8M1evXnWL+/Xy5ctm1qxZZuHChcYYYxYtWpRmmTLm+sHc69evNytXrnQccO4uWdP6EPXHH3+YypUr3/WtO8akP2tSUpK5cOGC8ff3N56eni7Zkmrlfj1+/Lhp1aqVqVSpkku2pKY3643Hc7tqrwor92tERIR57LHHTJkyZVzyuctK1vPnz5tDhw6Z7du3u2SjgJWsKY/977//flcPTaBIwRiTvXbpcocPJOnlrsfDZHfu+IO8QHZwqzO3pnwwuXbtmlv8iHR6zzKbsqvRxYsX73rGFOnJeu3aNXPu3DmzatUql34RlJ6sSUlJ5uzZs+bkyZMuPb77VllTyr+7nGk4vfdrdHS0iYiIcOlzLL3rqzvsnZDe14GjR4+6Ih6/I4Xr3OV3IdLD19fX1RHSLVeuXK6OkCPlzp3b1RGAbCnl9TM5OVkeHh5q3769jDF65plnZLPZNGjQIE2bNk3Hjx/Xp59+qrx587rs/SG9WSMiIrRgwQIVKFDAJTmtZI2MjNTnn3/u0t+UtHK/fvHFF/Lx8XH7rMePH9dnn33G/ZrJWbPT60DKOpAnT567m9Ul9Q0AALhUdjtz682yutuxkjfL6unpyf16B1hfs0ZOuV9dldVmjDF3r7YBAAB3kfIRwGazqUmTJtqxY4d+/vlnVa1a1cXJUiNr1iBr1iBr1nC3rOzaBwDAv5TNZlNycrJefvllrVu3Tjt27HDLD08SWbMKWbMGWbOGu2X1cNmSAQCAW6hcubK2bdum++67z9VRbousWYOsWYOsWcNdsrJrHwAA/3LGmGxz0iGyZg2yZg2yZg13yUqRAgAAAACL2LUPAAAAACyiSAEAAACARRQpAAAAALCIIgUAAAAAFlGkAAAAAMAiihQAAAAAWESRAgDkGJGRkbLZbNqxY4erowAAcjiKFAAgy0RFRemFF15QmTJl5O3trZIlS6pFixZas2ZNliyvZMmSOnPmjKpUqZLp8x47dqxsNpuef/55p+E7duyQzWZTZGRkpi8TAOC+KFIAgCwRGRmpGjVqaO3atXrzzTe1e/durVq1So888oj69++f4fkmJyfLbrenGp6YmChPT08FBQXJy8srw/NPTEy86TgfHx999NFHOnz4cIbnDwDIGShSAIAs0a9fP9lsNv3xxx9q06aNKlSooMqVK2vIkCH6/fffHdNNnz5dVatWla+vr0qWLKl+/fopPj7eMf7jjz9WQECAVqxYoXvvvVfe3t46ceKEgoOD9cYbb6hLly7y8/NT796909y1b8+ePXr88ceVL18+FS1aVJ07d9b58+cd4xs1aqQBAwZo0KBBKlSokJo2bXrT21SxYkU98sgjeu211246TXJysnr06KGQkBDlyZNHFStW1DvvvOM0Tbdu3dSyZUtNnDhRRYsWVUBAgMaNG6ekpCS9/PLLCgwMVIkSJTR//nyn6508eVLt2rVTQECAAgMD9dRTT7ElDABchCIFAMh0Fy9e1KpVq9S/f3/5+vqmGh8QEOD438PDQzNnztTevXv1ySefaO3atRo2bJjT9JcvX9aUKVP04Ycfau/evSpSpIgkadq0abr//vu1fft2jRo1KtVyYmJi1LhxY1WrVk1btmzRqlWrdPbsWbVr185puk8++US5c+fWr7/+qjlz5tzytk2ePFlLly7Vli1b0hxvt9tVokQJLVmyRPv27dPo0aP16quvavHixU7TrV27Vn/++ad++eUXTZ8+XWPGjFHz5s1VoEABbdq0Sc8//7z69OmjU6dOSZKuXbumpk2bKn/+/Prf//6nX3/9Vfny5dNjjz12y61oAIAsYgAAyGSbNm0yksyyZcssX3fJkiWmYMGCjsvz5883ksyOHTucpitdurRp2bKl07CIiAgjyWzfvt0YY8wbb7xhHn30UadpTp48aSSZgwcPGmOMadiwoalWrdptc40ZM8bcf//9xhhjOnToYBo3bmyMMWb79u1GkomIiLjpdfv372/atGnjuNy1a1dTunRpk5yc7BhWsWJFU79+fcflpKQk4+vra7744gtjjDGfffaZqVixorHb7Y5pEhISTJ48eczq1atvmx8AkLkyvhM5AAA3YYxJ97Q//fSTJk2apAMHDiguLk5JSUm6evWqLl++rLx580qScufOrfvuuy/VdWvWrHnLee/cuVPr1q1Tvnz5Uo07evSoKlSoIEmqUaNGuvNK0vjx41WpUiX98MMPjq1jN5o1a5bmzZunEydO6MqVK0pMTNQDDzzgNE3lypXl4fF/O4YULVrU6SQZnp6eKliwoKKjox235ciRI8qfP7/TfK5evaqjR49ayg8AuHMUKQBApitfvrxsNpsOHDhwy+kiIyPVvHlz9e3bVxMmTFBgYKA2bNigHj16KDEx0VGk8uTJI5vNlur6ae02eKP4+Hi1aNFCU6ZMSTWuWLFi6Z7PP5UtW1a9evXS8OHD9dFHHzmNW7hwoYYOHaq33npLderUUf78+fXmm29q06ZNTtPlypXL6bLNZktzWMqJNeLj41WjRg2Fh4enylO4cGFL+QEAd44iBQDIdIGBgWratKlmzZqlF198MVVRiYmJUUBAgLZu3Sq73a633nrLsXXmn8cS3Ynq1atr6dKlCg4OvqMz+aVl9OjRKlu2rBYuXOg0/Ndff1XdunXVr18/x7DM2GJUvXp1LVq0SEWKFJGfn98dzw8AcGc42QQAIEvMmjVLycnJevDBB7V06VIdPnxY+/fv18yZM1WnTh1JUrly5XTt2jW9++67OnbsmD777LPbnuzBiv79++vixYvq2LGjNm/erKNHj2r16tXq3r27kpOT72jeRYsW1ZAhQzRz5kyn4eXLl9eWLVu0evVqHTp0SKNGjdLmzZvvaFmS1KlTJxUqVEhPPfWU/ve//ykiIkI///yzXnzxRccJKQAAdw9FCgCQJcqUKaNt27bpkUce0UsvvaQqVaroP//5j9asWaPZs2dLku6//35Nnz5dU6ZMUZUqVRQeHq5JkyZlWobixYvr119/VXJysh599FFVrVpVgwYNUkBAgNPxSRk1dOjQVMdf9enTR61bt1b79u1Vu3ZtXbhwwWnrVEblzZtXv/zyi0qVKqXWrVurUqVK6tGjh65evcoWKgBwAZuxckQwAAAAAIAtUgAAAABgFUUKAAAAACyiSAEAAACARRQpAAAAALCIIgUAAAAAFlGkAAAAAMAiihQAAAAAWESRAgAAAACLKFIAAAAAYBFFCgAAAAAsokgBAAAAgEUUKQAAAACw6P8BJR3jz+Zumw0AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned[\"carrier_name\"].str.contains(\"Southwest Airlines Co.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "DJEp8zceOa9h",
        "outputId": "de3c1cbd-155b-48dd-f85d-68bb44d121ad"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        False\n",
              "1        False\n",
              "2        False\n",
              "3        False\n",
              "4        False\n",
              "         ...  \n",
              "42456    False\n",
              "42457    False\n",
              "42458    False\n",
              "42459    False\n",
              "42460    False\n",
              "Name: carrier_name, Length: 42460, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carrier_name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42456</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42457</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42458</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42459</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42460</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>42460 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_SW_airline = df_cleaned[df_cleaned[\"carrier_name\"].str.contains(\"Southwest Airlines Co.\", na=False)]\n",
        "df_SW_airline = df_cleaned[df_cleaned[\"carrier_name\"].str.contains(\"Southwest Airlines Co.\", na=False)]\n",
        "df_SW_airline.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "wpUznardOdu5",
        "outputId": "ea470dcb-010a-415f-fd07-54796379c998"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     carrier            carrier_name airport  \\\n",
              "1409      WN  Southwest Airlines Co.     ABQ   \n",
              "1410      WN  Southwest Airlines Co.     ALB   \n",
              "1411      WN  Southwest Airlines Co.     AMA   \n",
              "1412      WN  Southwest Airlines Co.     ATL   \n",
              "1413      WN  Southwest Airlines Co.     AUS   \n",
              "\n",
              "                                           airport_name  arr_flights  \\\n",
              "1409  Albuquerque, NM: Albuquerque International Sun...        687.0   \n",
              "1410                   Albany, NY: Albany International        293.0   \n",
              "1411  Amarillo, TX: Rick Husband Amarillo International        200.0   \n",
              "1412  Atlanta, GA: Hartsfield-Jackson Atlanta Intern...       2718.0   \n",
              "1413       Austin, TX: Austin - Bergstrom International       3046.0   \n",
              "\n",
              "      arr_del15  arr_cancelled  arr_diverted  arr_delay  carrier_delay  \\\n",
              "1409      226.0            6.0           1.0    12541.0         4255.0   \n",
              "1410       80.0            6.0           0.0     5679.0         2147.0   \n",
              "1411       48.0            4.0           0.0     2940.0         1033.0   \n",
              "1412      875.0           25.0           8.0    51674.0        16615.0   \n",
              "1413      874.0           23.0           4.0    47176.0        16714.0   \n",
              "\n",
              "      weather_delay  nas_delay  security_delay  delays  date  \n",
              "1409           66.0      720.0            60.0     NaN  2029  \n",
              "1410          126.0      116.0            19.0     NaN  2029  \n",
              "1411           35.0      128.0             0.0     NaN  2029  \n",
              "1412         1812.0     6030.0            52.0     NaN  2029  \n",
              "1413         1228.0     4232.0           234.0     NaN  2029  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bfbd393d-bb00-4520-aba0-dc6af9c7351b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carrier</th>\n",
              "      <th>carrier_name</th>\n",
              "      <th>airport</th>\n",
              "      <th>airport_name</th>\n",
              "      <th>arr_flights</th>\n",
              "      <th>arr_del15</th>\n",
              "      <th>arr_cancelled</th>\n",
              "      <th>arr_diverted</th>\n",
              "      <th>arr_delay</th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "      <th>delays</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1409</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>ABQ</td>\n",
              "      <td>Albuquerque, NM: Albuquerque International Sun...</td>\n",
              "      <td>687.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>12541.0</td>\n",
              "      <td>4255.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>720.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1410</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>ALB</td>\n",
              "      <td>Albany, NY: Albany International</td>\n",
              "      <td>293.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5679.0</td>\n",
              "      <td>2147.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1411</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>AMA</td>\n",
              "      <td>Amarillo, TX: Rick Husband Amarillo International</td>\n",
              "      <td>200.0</td>\n",
              "      <td>48.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2940.0</td>\n",
              "      <td>1033.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1412</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>ATL</td>\n",
              "      <td>Atlanta, GA: Hartsfield-Jackson Atlanta Intern...</td>\n",
              "      <td>2718.0</td>\n",
              "      <td>875.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>51674.0</td>\n",
              "      <td>16615.0</td>\n",
              "      <td>1812.0</td>\n",
              "      <td>6030.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1413</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>AUS</td>\n",
              "      <td>Austin, TX: Austin - Bergstrom International</td>\n",
              "      <td>3046.0</td>\n",
              "      <td>874.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>47176.0</td>\n",
              "      <td>16714.0</td>\n",
              "      <td>1228.0</td>\n",
              "      <td>4232.0</td>\n",
              "      <td>234.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bfbd393d-bb00-4520-aba0-dc6af9c7351b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bfbd393d-bb00-4520-aba0-dc6af9c7351b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bfbd393d-bb00-4520-aba0-dc6af9c7351b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4a3d9810-51ad-427c-b2ed-41da904c0237\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4a3d9810-51ad-427c-b2ed-41da904c0237')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4a3d9810-51ad-427c-b2ed-41da904c0237 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_SW_airline",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "count=df_SW_airline[\"carrier_name\"].nunique()\n",
        "print(count)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f_8bMq_8OjhP",
        "outputId": "a4ea2594-bca3-451c-c38f-eae53f00a07e"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_SW_airline[\"carrier_name\"].value_counts()\n",
        "df_SW_airline.keys()\n",
        "df_SW_airline.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "P9ZizzAkPW9Z",
        "outputId": "c329cc99-67d9-4877-ae53-205e7d1e8d81"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     carrier            carrier_name airport  \\\n",
              "1409      WN  Southwest Airlines Co.     ABQ   \n",
              "1410      WN  Southwest Airlines Co.     ALB   \n",
              "1411      WN  Southwest Airlines Co.     AMA   \n",
              "1412      WN  Southwest Airlines Co.     ATL   \n",
              "1413      WN  Southwest Airlines Co.     AUS   \n",
              "\n",
              "                                           airport_name  arr_flights  \\\n",
              "1409  Albuquerque, NM: Albuquerque International Sun...        687.0   \n",
              "1410                   Albany, NY: Albany International        293.0   \n",
              "1411  Amarillo, TX: Rick Husband Amarillo International        200.0   \n",
              "1412  Atlanta, GA: Hartsfield-Jackson Atlanta Intern...       2718.0   \n",
              "1413       Austin, TX: Austin - Bergstrom International       3046.0   \n",
              "\n",
              "      arr_del15  arr_cancelled  arr_diverted  arr_delay  carrier_delay  \\\n",
              "1409      226.0            6.0           1.0    12541.0         4255.0   \n",
              "1410       80.0            6.0           0.0     5679.0         2147.0   \n",
              "1411       48.0            4.0           0.0     2940.0         1033.0   \n",
              "1412      875.0           25.0           8.0    51674.0        16615.0   \n",
              "1413      874.0           23.0           4.0    47176.0        16714.0   \n",
              "\n",
              "      weather_delay  nas_delay  security_delay  delays  date  \n",
              "1409           66.0      720.0            60.0     NaN  2029  \n",
              "1410          126.0      116.0            19.0     NaN  2029  \n",
              "1411           35.0      128.0             0.0     NaN  2029  \n",
              "1412         1812.0     6030.0            52.0     NaN  2029  \n",
              "1413         1228.0     4232.0           234.0     NaN  2029  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-becd643f-72fc-4d1d-a9df-8566725d299c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carrier</th>\n",
              "      <th>carrier_name</th>\n",
              "      <th>airport</th>\n",
              "      <th>airport_name</th>\n",
              "      <th>arr_flights</th>\n",
              "      <th>arr_del15</th>\n",
              "      <th>arr_cancelled</th>\n",
              "      <th>arr_diverted</th>\n",
              "      <th>arr_delay</th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "      <th>delays</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1409</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>ABQ</td>\n",
              "      <td>Albuquerque, NM: Albuquerque International Sun...</td>\n",
              "      <td>687.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>12541.0</td>\n",
              "      <td>4255.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>720.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1410</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>ALB</td>\n",
              "      <td>Albany, NY: Albany International</td>\n",
              "      <td>293.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5679.0</td>\n",
              "      <td>2147.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1411</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>AMA</td>\n",
              "      <td>Amarillo, TX: Rick Husband Amarillo International</td>\n",
              "      <td>200.0</td>\n",
              "      <td>48.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2940.0</td>\n",
              "      <td>1033.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1412</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>ATL</td>\n",
              "      <td>Atlanta, GA: Hartsfield-Jackson Atlanta Intern...</td>\n",
              "      <td>2718.0</td>\n",
              "      <td>875.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>51674.0</td>\n",
              "      <td>16615.0</td>\n",
              "      <td>1812.0</td>\n",
              "      <td>6030.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1413</th>\n",
              "      <td>WN</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>AUS</td>\n",
              "      <td>Austin, TX: Austin - Bergstrom International</td>\n",
              "      <td>3046.0</td>\n",
              "      <td>874.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>47176.0</td>\n",
              "      <td>16714.0</td>\n",
              "      <td>1228.0</td>\n",
              "      <td>4232.0</td>\n",
              "      <td>234.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2029</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-becd643f-72fc-4d1d-a9df-8566725d299c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-becd643f-72fc-4d1d-a9df-8566725d299c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-becd643f-72fc-4d1d-a9df-8566725d299c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c9dcea13-3279-48c4-abd9-724e3965ff6e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c9dcea13-3279-48c4-abd9-724e3965ff6e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c9dcea13-3279-48c4-abd9-724e3965ff6e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_SW_airline",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_SW_subset=df_SW_airline[[\"carrier_delay\",\"weather_delay\",\"nas_delay\",\"security_delay\"]]"
      ],
      "metadata": {
        "id": "nrUQWIw4Piw9"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "weather_delay_tot=df_SW_subset[\"weather_delay\"].sum()\n",
        "nas_delay_tot=df_SW_subset[\"nas_delay\"].sum() #NAS (National Aviation System) Delay\n",
        "security_delay_tot=df_SW_subset[\"security_delay\"].sum()"
      ],
      "metadata": {
        "id": "q5ZWZY8iPr9c"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(weather_delay_tot)\n",
        "print(nas_delay_tot)\n",
        "print(security_delay_tot)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HpsaUDuiPumr",
        "outputId": "27ecdf4f-d6a3-4312-93c0-467935567054"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "441728.0\n",
            "2542425.0\n",
            "48830.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "carrier_delay_tot=df_SW_subset[\"carrier_delay\"].sum()  #we are going to create new columns to get the sum of all delay causes\n",
        "print(carrier_delay_tot)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZYc9WyBvPwh3",
        "outputId": "61e2366e-bf8a-4b31-8a4c-c2f50a3fbe34"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5518974.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_SW_subset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "dA5Nsr2vP3tr",
        "outputId": "735c534e-a774-4b4e-990e-841dda06ea33"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      carrier_delay  weather_delay  nas_delay  security_delay\n",
              "1409         4255.0           66.0      720.0            60.0\n",
              "1410         2147.0          126.0      116.0            19.0\n",
              "1411         1033.0           35.0      128.0             0.0\n",
              "1412        16615.0         1812.0     6030.0            52.0\n",
              "1413        16714.0         1228.0     4232.0           234.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5bccfdf3-fd20-48ee-9eb8-dba3079d1b0b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1409</th>\n",
              "      <td>4255.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>720.0</td>\n",
              "      <td>60.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1410</th>\n",
              "      <td>2147.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1411</th>\n",
              "      <td>1033.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1412</th>\n",
              "      <td>16615.0</td>\n",
              "      <td>1812.0</td>\n",
              "      <td>6030.0</td>\n",
              "      <td>52.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1413</th>\n",
              "      <td>16714.0</td>\n",
              "      <td>1228.0</td>\n",
              "      <td>4232.0</td>\n",
              "      <td>234.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5bccfdf3-fd20-48ee-9eb8-dba3079d1b0b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5bccfdf3-fd20-48ee-9eb8-dba3079d1b0b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5bccfdf3-fd20-48ee-9eb8-dba3079d1b0b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4cefa401-44bb-41d8-8c43-8dffcc84a9aa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4cefa401-44bb-41d8-8c43-8dffcc84a9aa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4cefa401-44bb-41d8-8c43-8dffcc84a9aa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_SW_subset",
              "summary": "{\n  \"name\": \"df_SW_subset\",\n  \"rows\": 2406,\n  \"fields\": [\n    {\n      \"column\": \"carrier_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3967.4683445208098,\n        \"min\": 0.0,\n        \"max\": 41159.0,\n        \"num_unique_values\": 1681,\n        \"samples\": [\n          4337.0,\n          6862.0,\n          2692.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 438.72609770556676,\n        \"min\": 0.0,\n        \"max\": 5922.0,\n        \"num_unique_values\": 591,\n        \"samples\": [\n          171.0,\n          1559.0,\n          114.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nas_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2849.5047752496635,\n        \"min\": 0.0,\n        \"max\": 42998.0,\n        \"num_unique_values\": 1121,\n        \"samples\": [\n          709.0,\n          47.0,\n          33.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"security_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.29743481123472,\n        \"min\": 0.0,\n        \"max\": 562.0,\n        \"num_unique_values\": 202,\n        \"samples\": [\n          113.0,\n          9.0,\n          227.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=[carrier_delay_tot,weather_delay_tot,nas_delay_tot,security_delay_tot]"
      ],
      "metadata": {
        "id": "YFrxpVfNQDh1"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cause=pd.DataFrame(data)\n",
        "df_cause"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "85zkgsx3QEi_",
        "outputId": "1e98b4e9-13ce-4504-b042-fd88759d849e"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0\n",
              "0  5518974.0\n",
              "1   441728.0\n",
              "2  2542425.0\n",
              "3    48830.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-41ce2c1d-0d82-4036-9728-9e65e06b9c92\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5518974.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>441728.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2542425.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>48830.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-41ce2c1d-0d82-4036-9728-9e65e06b9c92')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-41ce2c1d-0d82-4036-9728-9e65e06b9c92 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-41ce2c1d-0d82-4036-9728-9e65e06b9c92');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8688fe39-1051-4491-8bfe-7f4edebf2587\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8688fe39-1051-4491-8bfe-7f4edebf2587')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8688fe39-1051-4491-8bfe-7f4edebf2587 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_87bede58-672a-49fe-9b56-85e05bcb3339\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_cause')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_87bede58-672a-49fe-9b56-85e05bcb3339 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_cause');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_cause",
              "summary": "{\n  \"name\": \"df_cause\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2505761.012528446,\n        \"min\": 48830.0,\n        \"max\": 5518974.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          441728.0,\n          48830.0,\n          5518974.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cause=pd.DataFrame(data,index=[\"carrier\", \"weather\", \"nas\", \"security\"], columns=[\"causes\"])\n",
        "df_cause"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "cmJMdXUvQJTO",
        "outputId": "3b0d03e3-e529-4a6a-aa77-ab109d1a404b"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             causes\n",
              "carrier   5518974.0\n",
              "weather    441728.0\n",
              "nas       2542425.0\n",
              "security    48830.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-59bcc202-85fe-4d44-90b2-d9cc8190fac2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>causes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>carrier</th>\n",
              "      <td>5518974.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weather</th>\n",
              "      <td>441728.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nas</th>\n",
              "      <td>2542425.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>security</th>\n",
              "      <td>48830.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59bcc202-85fe-4d44-90b2-d9cc8190fac2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-59bcc202-85fe-4d44-90b2-d9cc8190fac2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-59bcc202-85fe-4d44-90b2-d9cc8190fac2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f6bd037f-ee37-448f-8b08-820f5a3a5529\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6bd037f-ee37-448f-8b08-820f5a3a5529')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f6bd037f-ee37-448f-8b08-820f5a3a5529 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f380eca4-fd93-4783-8067-86f8ce6389c0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_cause')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f380eca4-fd93-4783-8067-86f8ce6389c0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_cause');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_cause",
              "summary": "{\n  \"name\": \"df_cause\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"causes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2505761.012528446,\n        \"min\": 48830.0,\n        \"max\": 5518974.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          441728.0,\n          48830.0,\n          5518974.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install dash --upgrade"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HvuXEa7lQMOm",
        "outputId": "0fe460b1-0ac3-44a6-8a52-fd86f8d6d862"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: dash in /usr/local/lib/python3.10/dist-packages (2.18.1)\n",
            "Requirement already satisfied: Flask<3.1,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash) (2.2.5)\n",
            "Requirement already satisfied: Werkzeug<3.1 in /usr/local/lib/python3.10/dist-packages (from dash) (3.0.6)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (5.24.1)\n",
            "Requirement already satisfied: dash-html-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (2.0.0)\n",
            "Requirement already satisfied: dash-core-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (2.0.0)\n",
            "Requirement already satisfied: dash-table==5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (5.0.0)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.10/dist-packages (from dash) (8.5.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from dash) (4.12.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from dash) (2.32.3)\n",
            "Requirement already satisfied: retrying in /usr/local/lib/python3.10/dist-packages (from dash) (1.3.4)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash) (1.6.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from dash) (75.1.0)\n",
            "Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (3.1.4)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (2.2.0)\n",
            "Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (8.1.7)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (24.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from Werkzeug<3.1->dash) (3.0.2)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata->dash) (3.20.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2024.8.30)\n",
            "Requirement already satisfied: six>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from retrying->dash) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import dash\n",
        "print(dash.__version__)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "wwUdw2BVQP0Y",
        "outputId": "0644a72e-2845-420d-e40a-c9ea25eddc4c"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.18.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "\n",
        "sorted_df= df_cause.sort_values(by='causes',ascending=False)\n",
        "sorted_df\n",
        "figure= px.bar(sorted_df, title=\"Causes of flights cancellations and delays of the Southwest Airlines Co. from 2019-2022\")\n",
        "\n",
        "# Update the x-axis label\n",
        "figure.update_xaxes(title='')\n",
        "# Update the y-axis label\n",
        "figure.update_yaxes(title='')\n",
        "\n",
        "figure.show()\n",
        "\n",
        "import plotly.express as px\n",
        "\n",
        "long_df = px.data.medals_long()\n",
        "\n",
        "fig = px.bar(long_df, x=\"nation\", y=\"count\", color=\"medal\", title=\"Long-Form Input\")\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "-VKiyLgrQUQ6",
        "outputId": "05dee3c5-1f0f-4e20-8223-7de245700f3e"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"f8586bde-6d91-46bb-97c1-4a0a8964167a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f8586bde-6d91-46bb-97c1-4a0a8964167a\")) {                    Plotly.newPlot(                        \"f8586bde-6d91-46bb-97c1-4a0a8964167a\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=causes\\u003cbr\\u003eindex=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"causes\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"causes\",\"offsetgroup\":\"causes\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"carrier\",\"nas\",\"weather\",\"security\"],\"xaxis\":\"x\",\"y\":[5518974.0,2542425.0,441728.0,48830.0],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"legend\":{\"title\":{\"text\":\"variable\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Causes of flights cancellations and delays of the Southwest Airlines Co. from 2019-2022\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('f8586bde-6d91-46bb-97c1-4a0a8964167a');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"09a9f9e1-7470-4e25-8ff8-642317acccfd\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"09a9f9e1-7470-4e25-8ff8-642317acccfd\")) {                    Plotly.newPlot(                        \"09a9f9e1-7470-4e25-8ff8-642317acccfd\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"medal=gold\\u003cbr\\u003enation=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"gold\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"gold\",\"offsetgroup\":\"gold\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"South Korea\",\"China\",\"Canada\"],\"xaxis\":\"x\",\"y\":[24,10,9],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"medal=silver\\u003cbr\\u003enation=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"silver\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"silver\",\"offsetgroup\":\"silver\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"South Korea\",\"China\",\"Canada\"],\"xaxis\":\"x\",\"y\":[13,15,12],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"medal=bronze\\u003cbr\\u003enation=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"bronze\",\"marker\":{\"color\":\"#00cc96\",\"pattern\":{\"shape\":\"\"}},\"name\":\"bronze\",\"offsetgroup\":\"bronze\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"South Korea\",\"China\",\"Canada\"],\"xaxis\":\"x\",\"y\":[11,8,12],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"nation\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"count\"}},\"legend\":{\"title\":{\"text\":\"medal\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Long-Form Input\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('09a9f9e1-7470-4e25-8ff8-642317acccfd');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "long_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "PVTuxErIQx0t",
        "outputId": "ed1417ef-f016-4772-afce-608d4246cbe2"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        nation   medal  count\n",
              "0  South Korea    gold     24\n",
              "1        China    gold     10\n",
              "2       Canada    gold      9\n",
              "3  South Korea  silver     13\n",
              "4        China  silver     15\n",
              "5       Canada  silver     12\n",
              "6  South Korea  bronze     11\n",
              "7        China  bronze      8\n",
              "8       Canada  bronze     12"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f2c3d425-654f-4320-b3d7-2b59d287a7dc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>nation</th>\n",
              "      <th>medal</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>South Korea</td>\n",
              "      <td>gold</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>China</td>\n",
              "      <td>gold</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Canada</td>\n",
              "      <td>gold</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>South Korea</td>\n",
              "      <td>silver</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>China</td>\n",
              "      <td>silver</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Canada</td>\n",
              "      <td>silver</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>South Korea</td>\n",
              "      <td>bronze</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>China</td>\n",
              "      <td>bronze</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Canada</td>\n",
              "      <td>bronze</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2c3d425-654f-4320-b3d7-2b59d287a7dc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f2c3d425-654f-4320-b3d7-2b59d287a7dc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f2c3d425-654f-4320-b3d7-2b59d287a7dc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-14bf1c58-c3c8-42f3-ab4e-b869add48a99\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-14bf1c58-c3c8-42f3-ab4e-b869add48a99')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-14bf1c58-c3c8-42f3-ab4e-b869add48a99 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_15209ed2-e8fe-4220-85ac-2be47493877b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('long_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_15209ed2-e8fe-4220-85ac-2be47493877b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('long_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "long_df",
              "summary": "{\n  \"name\": \"long_df\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"nation\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"South Korea\",\n          \"China\",\n          \"Canada\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medal\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"gold\",\n          \"silver\",\n          \"bronze\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 8,\n        \"max\": 24,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10,\n          12,\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cause_airlines=df_cleaned.groupby(by=\"carrier_name\", as_index=True)[[\"carrier_delay\",\"weather_delay\",\"nas_delay\", \"security_delay\"]].mean()"
      ],
      "metadata": {
        "id": "czbjmxQNQ3SR"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cause_airlines.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "lsbuvbC-Q5lz",
        "outputId": "3cfd4cc0-c484-4f3a-efc3-7c6e84d190ae"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        carrier_delay  weather_delay    nas_delay  \\\n",
              "carrier_name                                                        \n",
              "Alaska Airlines Inc.       489.294595      45.616757   470.972973   \n",
              "Allegiant Air              387.435719      79.325522   188.015833   \n",
              "American Airlines Inc.    2414.164011     346.050525  1215.510688   \n",
              "Delta Air Lines Inc.      1622.915829     207.202261   887.169598   \n",
              "Endeavor Air Inc.          500.519337     112.360958   329.980479   \n",
              "\n",
              "                        security_delay  \n",
              "carrier_name                            \n",
              "Alaska Airlines Inc.         12.560541  \n",
              "Allegiant Air                 4.800507  \n",
              "American Airlines Inc.       17.385931  \n",
              "Delta Air Lines Inc.          7.716709  \n",
              "Endeavor Air Inc.             0.893554  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-41648717-df60-4605-aad9-579b7fc6011e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carrier_name</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Alaska Airlines Inc.</th>\n",
              "      <td>489.294595</td>\n",
              "      <td>45.616757</td>\n",
              "      <td>470.972973</td>\n",
              "      <td>12.560541</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Allegiant Air</th>\n",
              "      <td>387.435719</td>\n",
              "      <td>79.325522</td>\n",
              "      <td>188.015833</td>\n",
              "      <td>4.800507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>American Airlines Inc.</th>\n",
              "      <td>2414.164011</td>\n",
              "      <td>346.050525</td>\n",
              "      <td>1215.510688</td>\n",
              "      <td>17.385931</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Delta Air Lines Inc.</th>\n",
              "      <td>1622.915829</td>\n",
              "      <td>207.202261</td>\n",
              "      <td>887.169598</td>\n",
              "      <td>7.716709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Endeavor Air Inc.</th>\n",
              "      <td>500.519337</td>\n",
              "      <td>112.360958</td>\n",
              "      <td>329.980479</td>\n",
              "      <td>0.893554</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-41648717-df60-4605-aad9-579b7fc6011e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-41648717-df60-4605-aad9-579b7fc6011e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-41648717-df60-4605-aad9-579b7fc6011e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-22abfc76-362e-48a0-9cbe-eb23fe1bc51c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-22abfc76-362e-48a0-9cbe-eb23fe1bc51c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-22abfc76-362e-48a0-9cbe-eb23fe1bc51c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_cause_airlines",
              "summary": "{\n  \"name\": \"df_cause_airlines\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"carrier_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Alaska Airlines Inc.\",\n          \"Allegiant Air\",\n          \"Hawaiian Airlines Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carrier_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 661.3981597988011,\n        \"min\": 338.49863163656266,\n        \"max\": 2414.1640108822385,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          489.29459459459457,\n          387.43571880937304,\n          732.4390804597701\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.50993606909678,\n        \"min\": 31.699879951980794,\n        \"max\": 346.05052467936264,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          45.61675675675676,\n          79.32552248258392,\n          36.57011494252873\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nas_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 382.7707141662836,\n        \"min\": 14.772413793103448,\n        \"max\": 1215.510687912942,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          470.97297297297297,\n          188.01583280557315,\n          14.772413793103448\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"security_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.106502083394316,\n        \"min\": 0.0,\n        \"max\": 28.813374805598755,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          12.56054054054054,\n          4.800506649778341,\n          2.0147783251231526\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "figure2 = px.bar(df_cause_airlines, title=\"Causes of flights cancelation and delay\")\n",
        "figure2.update_layout(xaxis_title=\"Airlines\", yaxis_title=\"\", legend_title=\"causes\")\n",
        "figure2.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "jqCw521TQ8Bp",
        "outputId": "e3fc5916-2e4e-4069-ad19-efecbf9309e0"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"06255462-3fa3-4c53-9980-556bdab74a40\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"06255462-3fa3-4c53-9980-556bdab74a40\")) {                    Plotly.newPlot(                        \"06255462-3fa3-4c53-9980-556bdab74a40\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=carrier_delay\\u003cbr\\u003ecarrier_name=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"carrier_delay\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"carrier_delay\",\"offsetgroup\":\"carrier_delay\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"Alaska Airlines Inc.\",\"Allegiant Air\",\"American Airlines Inc.\",\"Delta Air Lines Inc.\",\"Endeavor Air Inc.\",\"Envoy Air\",\"ExpressJet Airlines LLC\",\"Frontier Airlines Inc.\",\"Hawaiian Airlines Inc.\",\"Horizon Air\",\"JetBlue Airways\",\"Mesa Airlines Inc.\",\"PSA Airlines Inc.\",\"Republic Airline\",\"SkyWest Airlines Inc.\",\"Southwest Airlines Co.\",\"Spirit Air Lines\",\"United Air Lines Inc.\"],\"xaxis\":\"x\",\"y\":[489.29459459459457,387.43571880937304,2414.1640108822385,1622.9158291457286,500.5193370165746,338.49863163656266,457.68983492615115,366.6386554621849,732.4390804597701,436.45430809399477,1702.8280337443218,658.6764475743349,644.2467811158798,674.4048473967684,1356.3020056356704,2293.837905236908,769.1275272161741,1085.6819532908705],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=weather_delay\\u003cbr\\u003ecarrier_name=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"weather_delay\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"weather_delay\",\"offsetgroup\":\"weather_delay\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"Alaska Airlines Inc.\",\"Allegiant Air\",\"American Airlines Inc.\",\"Delta Air Lines Inc.\",\"Endeavor Air Inc.\",\"Envoy Air\",\"ExpressJet Airlines LLC\",\"Frontier Airlines Inc.\",\"Hawaiian Airlines Inc.\",\"Horizon Air\",\"JetBlue Airways\",\"Mesa Airlines Inc.\",\"PSA Airlines Inc.\",\"Republic Airline\",\"SkyWest Airlines Inc.\",\"Southwest Airlines Co.\",\"Spirit Air Lines\",\"United Air Lines Inc.\"],\"xaxis\":\"x\",\"y\":[45.61675675675676,79.32552248258392,346.05052467936264,207.20226130653268,112.3609576427256,156.4663382594417,51.33362293657689,31.699879951980794,36.57011494252873,42.43603133159269,142.24010382868266,167.26721439749608,152.94763948497854,134.66202872531417,331.6149511022708,183.59434746467164,151.66174183514775,278.56815286624203],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=nas_delay\\u003cbr\\u003ecarrier_name=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"nas_delay\",\"marker\":{\"color\":\"#00cc96\",\"pattern\":{\"shape\":\"\"}},\"name\":\"nas_delay\",\"offsetgroup\":\"nas_delay\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"Alaska Airlines Inc.\",\"Allegiant Air\",\"American Airlines Inc.\",\"Delta Air Lines Inc.\",\"Endeavor Air Inc.\",\"Envoy Air\",\"ExpressJet Airlines LLC\",\"Frontier Airlines Inc.\",\"Hawaiian Airlines Inc.\",\"Horizon Air\",\"JetBlue Airways\",\"Mesa Airlines Inc.\",\"PSA Airlines Inc.\",\"Republic Airline\",\"SkyWest Airlines Inc.\",\"Southwest Airlines Co.\",\"Spirit Air Lines\",\"United Air Lines Inc.\"],\"xaxis\":\"x\",\"y\":[470.97297297297297,188.01583280557315,1215.510687912942,887.1695979899497,329.9804788213628,392.5684181718664,574.2536924413554,327.6078431372549,14.772413793103448,182.63707571801567,861.3783257624918,315.70539906103284,369.6188841201717,735.4174147217235,324.6613625062158,1056.7019950124688,1191.475894245723,1132.6089171974522],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=security_delay\\u003cbr\\u003ecarrier_name=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"security_delay\",\"marker\":{\"color\":\"#ab63fa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"security_delay\",\"offsetgroup\":\"security_delay\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"Alaska Airlines Inc.\",\"Allegiant Air\",\"American Airlines Inc.\",\"Delta Air Lines Inc.\",\"Endeavor Air Inc.\",\"Envoy Air\",\"ExpressJet Airlines LLC\",\"Frontier Airlines Inc.\",\"Hawaiian Airlines Inc.\",\"Horizon Air\",\"JetBlue Airways\",\"Mesa Airlines Inc.\",\"PSA Airlines Inc.\",\"Republic Airline\",\"SkyWest Airlines Inc.\",\"Southwest Airlines Co.\",\"Spirit Air Lines\",\"United Air Lines Inc.\"],\"xaxis\":\"x\",\"y\":[12.56054054054054,4.800506649778341,17.385930820054412,7.716708542713568,0.8935543278084714,2.0147783251231526,0.0,0.0,7.816091954022989,2.6344647519582245,13.684620376378975,1.6713615023474178,4.15793991416309,3.4519748653500897,3.7449030333167577,20.295095594347465,28.813374805598755,0.7923566878980892],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Airlines\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"\"}},\"legend\":{\"title\":{\"text\":\"causes\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Causes of flights cancelation and delay\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('06255462-3fa3-4c53-9980-556bdab74a40');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install kaleido"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DlCc_b2EQ-Ks",
        "outputId": "c50a981f-0972-4523-e180-74e50241acb6"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaleido in /usr/local/lib/python3.10/dist-packages (0.2.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip uninstall  kaleido"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xSzZ-XK5RF8H",
        "outputId": "93331d61-75e3-4716-f50b-391e5f0e4cad"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found existing installation: kaleido 0.2.1\n",
            "Uninstalling kaleido-0.2.1:\n",
            "  Would remove:\n",
            "    /usr/local/lib/python3.10/dist-packages/kaleido-0.2.1.dist-info/*\n",
            "    /usr/local/lib/python3.10/dist-packages/kaleido/*\n",
            "Proceed (Y/n)? y\n",
            "  Successfully uninstalled kaleido-0.2.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import kaleido\n",
        "import plotly.io as pio\n",
        "figure2.write_image(\"figure2.png\", engine=\"kaleido\")"
      ],
      "metadata": {
        "id": "y3JOV2o4RJL-"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "figure2.write_image(\"figure2.png\")  # Example to save as PNG\n",
        "figure2.write_image(\"figure2.svg\")"
      ],
      "metadata": {
        "id": "SSdrk3HxTOaf"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download(\"figure2.svg\")\n",
        "files.download(\"figure2.png\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "fiQuNq8XTRy4",
        "outputId": "b3b2cf71-49c3-416c-871f-aa3f675ecd77"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_6343b5ff-10dc-4788-be02-1b87ea6ca81c\", \"figure2.svg\", 30123)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_1ea2c045-9ef0-4c67-9a81-23468fb75c70\", \"figure2.png\", 61286)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "figure2.write_html(\"figure2.html\")"
      ],
      "metadata": {
        "id": "t101I7e7TcpM"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.keys()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GjEdAwtqTf1h",
        "outputId": "5803813d-a8a2-4fb7-f66f-15b86352f06a"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['carrier', 'carrier_name', 'airport', 'airport_name', 'arr_flights',\n",
              "       'arr_del15', 'arr_cancelled', 'arr_diverted', 'arr_delay',\n",
              "       'carrier_delay', 'weather_delay', 'nas_delay', 'security_delay',\n",
              "       'delays', 'date'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned['date'] = pd.to_datetime(df_cleaned['date'])"
      ],
      "metadata": {
        "id": "Haa-vQTrVeHr"
      },
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "\n",
        "# Create a new matplotlib figure with a specified size\n",
        "plt.figure(figsize=(15, 8))\n",
        "\n",
        "# Add a vertical dashed line at the specific date '2020-01-01'\n",
        "plt.axvline(pd.Timestamp('2020-01-01'), color='purple', linestyle='--')\n",
        "\n",
        "# Set the title of the plot\n",
        "plt.title(\"Number of canceled flights during 2019 to 2022\")\n",
        "\n",
        "# Set the label for the y-axis (vertical axis)\n",
        "plt.ylabel(\"# of Cancelled flights\")\n",
        "\n",
        "# Create a line plot using Seaborn\n",
        "sns.lineplot(data=df_cleaned, x=\"date\", y=\"arr_cancelled\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 735
        },
        "id": "a07fCfF6TiMQ",
        "outputId": "02be01f3-cdc8-498d-fe24-e7a8b8c6541a"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Number of canceled flights during 2019 to 2022'}, xlabel='date', ylabel='# of Cancelled flights'>"
            ]
          },
          "metadata": {},
          "execution_count": 104
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "figure2.write_image(\"figure2.png\", engine=\"kaleido\")"
      ],
      "metadata": {
        "id": "ag__7GdWUYKJ"
      },
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.savefig('cancellled_flights.png')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "V0Ily_zqUKEU",
        "outputId": "1eb804cc-8377-4a12-b067-ab4b90e4b105"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.close()"
      ],
      "metadata": {
        "id": "2EGxeKlwVuTL"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_cleaned.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FzjPi2GPVwNz",
        "outputId": "da295a6f-f5af-4c41-fe35-971c30719100"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  carrier       carrier_name airport  \\\n",
            "0      9E  Endeavor Air Inc.     ABE   \n",
            "1      9E  Endeavor Air Inc.     ABY   \n",
            "2      9E  Endeavor Air Inc.     ACK   \n",
            "3      9E  Endeavor Air Inc.     AEX   \n",
            "4      9E  Endeavor Air Inc.     AGS   \n",
            "\n",
            "                                        airport_name  arr_flights  arr_del15  \\\n",
            "0  Allentown/Bethlehem/Easton, PA: Lehigh Valley ...         33.0        2.0   \n",
            "1             Albany, GA: Southwest Georgia Regional         78.0       25.0   \n",
            "2                  Nantucket, MA: Nantucket Memorial        124.0       19.0   \n",
            "3           Alexandria, LA: Alexandria International         67.0       10.0   \n",
            "4        Augusta, GA: Augusta Regional at Bush Field        174.0       30.0   \n",
            "\n",
            "   arr_cancelled  arr_diverted  arr_delay  carrier_delay  weather_delay  \\\n",
            "0            0.0           0.0      129.0           98.0           23.0   \n",
            "1            0.0           0.0     1664.0          887.0           52.0   \n",
            "2            5.0           4.0     1523.0          388.0           35.0   \n",
            "3            0.0           1.0      657.0          103.0           82.0   \n",
            "4            1.0           0.0     2462.0         1686.0          310.0   \n",
            "\n",
            "   nas_delay  security_delay  delays       date  \n",
            "0        8.0             0.0     NaN 2029-01-01  \n",
            "1      224.0             0.0     NaN 2029-01-01  \n",
            "2      511.0             0.0     NaN 2029-01-01  \n",
            "3       93.0            25.0     NaN 2029-01-01  \n",
            "4      139.0             0.0     NaN 2029-01-01  \n"
          ]
        }
      ]
    }
  ]
}